
reflow_oven.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000656  0000070a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000656  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080013a  0080013a  00000744  2**0
                  ALLOC
  3 .eeprom       00000008  00810000  00810000  00000744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000077c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000138  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000134c  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005e1  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000066a  00000000  00000000  00002221  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000350  00000000  00000000  0000288c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000042f  00000000  00000000  00002bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bda  00000000  00000000  0000300b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000130  00000000  00000000  00003be5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	16 c2       	rjmp	.+1068   	; 0x430 <__vector_1>
   4:	60 c2       	rjmp	.+1216   	; 0x4c6 <__vector_2>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e6 e5       	ldi	r30, 0x56	; 86
  48:	f6 e0       	ldi	r31, 0x06	; 6
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	aa 33       	cpi	r26, 0x3A	; 58
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	aa e3       	ldi	r26, 0x3A	; 58
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a6 34       	cpi	r26, 0x46	; 70
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	ae d1       	rcall	.+860    	; 0x3c4 <main>
  68:	f4 c2       	rjmp	.+1512   	; 0x652 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <_LCD_OutNibble>:
// Funkcja wystawiaj¹ca pó³bajt na magistralê danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
  6c:	80 ff       	sbrs	r24, 0
  6e:	02 c0       	rjmp	.+4      	; 0x74 <_LCD_OutNibble+0x8>
	LCD_DB4_PORT |= LCD_DB4;
  70:	43 9a       	sbi	0x08, 3	; 8
  72:	01 c0       	rjmp	.+2      	; 0x76 <_LCD_OutNibble+0xa>
else
	LCD_DB4_PORT  &= ~LCD_DB4;
  74:	43 98       	cbi	0x08, 3	; 8

if(nibbleToWrite & 0x02)
  76:	81 ff       	sbrs	r24, 1
  78:	02 c0       	rjmp	.+4      	; 0x7e <_LCD_OutNibble+0x12>
	LCD_DB5_PORT |= LCD_DB5;
  7a:	42 9a       	sbi	0x08, 2	; 8
  7c:	01 c0       	rjmp	.+2      	; 0x80 <_LCD_OutNibble+0x14>
else
	LCD_DB5_PORT  &= ~LCD_DB5;
  7e:	42 98       	cbi	0x08, 2	; 8

if(nibbleToWrite & 0x04)
  80:	82 ff       	sbrs	r24, 2
  82:	02 c0       	rjmp	.+4      	; 0x88 <_LCD_OutNibble+0x1c>
	LCD_DB6_PORT |= LCD_DB6;
  84:	41 9a       	sbi	0x08, 1	; 8
  86:	01 c0       	rjmp	.+2      	; 0x8a <_LCD_OutNibble+0x1e>
else
	LCD_DB6_PORT  &= ~LCD_DB6;
  88:	41 98       	cbi	0x08, 1	; 8

if(nibbleToWrite & 0x08)
  8a:	83 ff       	sbrs	r24, 3
  8c:	02 c0       	rjmp	.+4      	; 0x92 <_LCD_OutNibble+0x26>
	LCD_DB7_PORT |= LCD_DB7;
  8e:	40 9a       	sbi	0x08, 0	; 8
  90:	08 95       	ret
else
	LCD_DB7_PORT  &= ~LCD_DB7;
  92:	40 98       	cbi	0x08, 0	; 8
  94:	08 95       	ret

00000096 <_LCD_Write>:
//
// Funkcja zapisu bajtu do wyœwietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
  96:	cf 93       	push	r28
  98:	c8 2f       	mov	r28, r24
LCD_E_PORT |= LCD_E;
  9a:	28 9a       	sbi	0x05, 0	; 5
_LCD_OutNibble(dataToWrite >> 4);
  9c:	82 95       	swap	r24
  9e:	8f 70       	andi	r24, 0x0F	; 15
  a0:	e5 df       	rcall	.-54     	; 0x6c <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
  a2:	28 98       	cbi	0x05, 0	; 5
LCD_E_PORT |= LCD_E;
  a4:	28 9a       	sbi	0x05, 0	; 5
_LCD_OutNibble(dataToWrite);
  a6:	8c 2f       	mov	r24, r28
  a8:	e1 df       	rcall	.-62     	; 0x6c <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
  aa:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	85 e8       	ldi	r24, 0x85	; 133
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <_LCD_Write+0x18>
  b2:	00 00       	nop
_delay_us(50);
}
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <LCD_WriteCommand>:
// Funkcja zapisu rozkazu do wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
  b8:	5f 98       	cbi	0x0b, 7	; 11
_LCD_Write(commandToWrite);
  ba:	ed cf       	rjmp	.-38     	; 0x96 <_LCD_Write>

000000bc <LCD_WriteData>:
// Funkcja zapisu danych do pamiêci wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
  bc:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_Write(dataToWrite);
  be:	eb cf       	rjmp	.-42     	; 0x96 <_LCD_Write>

000000c0 <LCD_WriteText>:
//
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	ec 01       	movw	r28, r24
while(*text)
  c6:	89 91       	ld	r24, Y+
  c8:	88 23       	and	r24, r24
  ca:	11 f0       	breq	.+4      	; 0xd0 <LCD_WriteText+0x10>
  LCD_WriteData(*text++);
  cc:	f7 df       	rcall	.-18     	; 0xbc <LCD_WriteData>
  ce:	fb cf       	rjmp	.-10     	; 0xc6 <LCD_WriteText+0x6>
}
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <LCD_GoTo>:
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
  d6:	90 e4       	ldi	r25, 0x40	; 64
  d8:	69 9f       	mul	r22, r25
  da:	80 0d       	add	r24, r0
  dc:	11 24       	eor	r1, r1
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	eb cf       	rjmp	.-42     	; 0xb8 <LCD_WriteCommand>

000000e2 <LCD_Clear>:
// Funkcja czyszczenia ekranu wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Clear(void)
{
LCD_WriteCommand(HD44780_CLEAR);
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	e9 df       	rcall	.-46     	; 0xb8 <LCD_WriteCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	8f e9       	ldi	r24, 0x9F	; 159
  e8:	9f e0       	ldi	r25, 0x0F	; 15
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_Clear+0x8>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_Clear+0xe>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <LCD_Init>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Init(void)
{
  f4:	cf 93       	push	r28
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
  f6:	3b 9a       	sbi	0x07, 3	; 7
LCD_DB5_DIR |= LCD_DB5; //
  f8:	3a 9a       	sbi	0x07, 2	; 7
LCD_DB6_DIR |= LCD_DB6; //
  fa:	39 9a       	sbi	0x07, 1	; 7
LCD_DB7_DIR |= LCD_DB7; //
  fc:	38 9a       	sbi	0x07, 0	; 7
LCD_E_DIR 	|= LCD_E;   //
  fe:	20 9a       	sbi	0x04, 0	; 4
LCD_RS_DIR 	|= LCD_RS;  //
 100:	57 9a       	sbi	0x0a, 7	; 10
 102:	8f e2       	ldi	r24, 0x2F	; 47
 104:	95 e7       	ldi	r25, 0x75	; 117
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_Init+0x12>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_Init+0x18>
 10c:	00 00       	nop
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 10e:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 110:	28 98       	cbi	0x05, 0	; 5
 112:	c3 e0       	ldi	r28, 0x03	; 3

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
  {
  LCD_E_PORT |= LCD_E; //  E = 1
 114:	28 9a       	sbi	0x05, 0	; 5
  _LCD_OutNibble(0x03); // tryb 8-bitowy
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	a9 df       	rcall	.-174    	; 0x6c <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
 11a:	28 98       	cbi	0x05, 0	; 5
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	97 e2       	ldi	r25, 0x27	; 39
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_Init+0x2c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_Init+0x32>
 126:	00 00       	nop
 128:	c1 50       	subi	r28, 0x01	; 1
LCD_RS_DIR 	|= LCD_RS;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 12a:	a1 f7       	brne	.-24     	; 0x114 <LCD_Init+0x20>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
 12c:	28 9a       	sbi	0x05, 0	; 5
_LCD_OutNibble(0x02); // tryb 4-bitowy
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	9d df       	rcall	.-198    	; 0x6c <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
 132:	28 98       	cbi	0x05, 0	; 5
 134:	8f ec       	ldi	r24, 0xCF	; 207
 136:	97 e0       	ldi	r25, 0x07	; 7
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_Init+0x44>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_Init+0x4a>
 13e:	00 00       	nop

_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 140:	88 e2       	ldi	r24, 0x28	; 40
 142:	ba df       	rcall	.-140    	; 0xb8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 144:	88 e0       	ldi	r24, 0x08	; 8
 146:	b8 df       	rcall	.-144    	; 0xb8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	b6 df       	rcall	.-148    	; 0xb8 <LCD_WriteCommand>
 14c:	8f e9       	ldi	r24, 0x9F	; 159
 14e:	9f e0       	ldi	r25, 0x0F	; 15
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_Init+0x5c>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_Init+0x62>
 156:	00 00       	nop
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	ae df       	rcall	.-164    	; 0xb8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 15c:	8c e0       	ldi	r24, 0x0C	; 12
}
 15e:	cf 91       	pop	r28
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 160:	ab cf       	rjmp	.-170    	; 0xb8 <LCD_WriteCommand>

00000162 <eepromSave>:
	encoderPosition = mem.contrast;
}

void eepromSave(void)
{
	eeprom_update_block(&mem,&eemem,sizeof(eemem_t));
 162:	48 e0       	ldi	r20, 0x08	; 8
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	8d e3       	ldi	r24, 0x3D	; 61
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	50 c2       	rjmp	.+1184   	; 0x610 <eeprom_update_block>

00000170 <eepromInit>:
	_delay_ms(3000);
	LCD_Clear();	
}

void eepromInit(void)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
	eeprom_read_block(&mem, &eemem, sizeof(eemem_t));
 174:	48 e0       	ldi	r20, 0x08	; 8
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	8d e3       	ldi	r24, 0x3D	; 61
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	37 d2       	rcall	.+1134   	; 0x5f0 <eeprom_read_block>
	mem.powerup++;
 182:	cd e3       	ldi	r28, 0x3D	; 61
 184:	d1 e0       	ldi	r29, 0x01	; 1
 186:	88 81       	ld	r24, Y
 188:	99 81       	ldd	r25, Y+1	; 0x01
 18a:	aa 81       	ldd	r26, Y+2	; 0x02
 18c:	bb 81       	ldd	r27, Y+3	; 0x03
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	a1 1d       	adc	r26, r1
 192:	b1 1d       	adc	r27, r1
 194:	88 83       	st	Y, r24
 196:	99 83       	std	Y+1, r25	; 0x01
 198:	aa 83       	std	Y+2, r26	; 0x02
 19a:	bb 83       	std	Y+3, r27	; 0x03
	eepromSave();
 19c:	e2 df       	rcall	.-60     	; 0x162 <eepromSave>
	encoderPosition = mem.contrast;
 19e:	8d 81       	ldd	r24, Y+5	; 0x05
 1a0:	80 93 3a 01 	sts	0x013A, r24
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <ioInit>:
	eeprom_update_block(&mem,&eemem,sizeof(eemem_t));
}

void ioInit(void)
{
	DDRC = 0xFF;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	87 b9       	out	0x07, r24	; 7
	DDRD = _BV(PD0)|_BV(PD1)|_BV(PD5)|_BV(PD6)|_BV(PD7);
 1ae:	83 ee       	ldi	r24, 0xE3	; 227
 1b0:	8a b9       	out	0x0a, r24	; 10
	DDRB = _BV(PB0)|_BV(PB1)|_BV(PB2)|_BV(PB3)|_BV(PB5)|_BV(PB6)|_BV(PB7);
 1b2:	8f ee       	ldi	r24, 0xEF	; 239
 1b4:	84 b9       	out	0x04, r24	; 4
	
	PORTC = 0;
 1b6:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;
 1b8:	1b b8       	out	0x0b, r1	; 11
	PORTB = _BV(PB2);
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	85 b9       	out	0x05, r24	; 5
 1be:	08 95       	ret

000001c0 <timerInit>:
}

void timerInit(void)
{
	//Timer 0 Fast PWM for backlight & contrast
	TCCR0A = _BV(COM0A1)|_BV(COM0B1)|_BV(WGM01)|_BV(WGM00);
 1c0:	83 ea       	ldi	r24, 0xA3	; 163
 1c2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS00);
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0;
 1c8:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 1ca:	18 bc       	out	0x28, r1	; 40
 1cc:	08 95       	ret

000001ce <pinInterruptsInit>:
}

void pinInterruptsInit(void)
{
	//INT0 on falling edge, INT1 on any edge
	EICRA = _BV(ISC11)|_BV(ISC01);
 1ce:	8a e0       	ldi	r24, 0x0A	; 10
 1d0:	80 93 69 00 	sts	0x0069, r24
	EIMSK = _BV(INT1)|_BV(INT0);
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	8d bb       	out	0x1d, r24	; 29
 1d8:	08 95       	ret

000001da <setBacklight>:
}

void setBacklight(uint8_t brightnes)
{
	if (brightnes)
 1da:	88 23       	and	r24, r24
 1dc:	19 f0       	breq	.+6      	; 0x1e4 <setBacklight+0xa>
	{
		TCCR0A = _BV(COM0A1)|_BV(COM0B1)|_BV(WGM01)|_BV(WGM00);
 1de:	93 ea       	ldi	r25, 0xA3	; 163
 1e0:	94 bd       	out	0x24, r25	; 36
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <setBacklight+0xc>
	} 
	else
	{
		TCCR0A = 0;
 1e4:	14 bc       	out	0x24, r1	; 36
	}
	OCR0B = brightnes;
 1e6:	88 bd       	out	0x28, r24	; 40
	mem.backlight = brightnes;
 1e8:	80 93 41 01 	sts	0x0141, r24
 1ec:	08 95       	ret

000001ee <lcd8t>:
		_delay_ms(1);
	speakerOff();
}

void lcd8t(uint8_t l)	//print on lcd decimal number up to 255
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
	uint8_t j,d,s;
	j = l%10;
	l /= 10;
 1f2:	2a e0       	ldi	r18, 0x0A	; 10
 1f4:	62 2f       	mov	r22, r18
 1f6:	a9 d1       	rcall	.+850    	; 0x54a <__udivmodqi4>
 1f8:	c9 2f       	mov	r28, r25
	d = l%10;
	l /= 10;
 1fa:	a7 d1       	rcall	.+846    	; 0x54a <__udivmodqi4>
 1fc:	d9 2f       	mov	r29, r25
	s = l%10;
 1fe:	a5 d1       	rcall	.+842    	; 0x54a <__udivmodqi4>
	LCD_WriteData('0'+s);
 200:	80 e3       	ldi	r24, 0x30	; 48
 202:	89 0f       	add	r24, r25
 204:	5b df       	rcall	.-330    	; 0xbc <LCD_WriteData>
	LCD_WriteData('0'+d);
 206:	80 e3       	ldi	r24, 0x30	; 48
 208:	8d 0f       	add	r24, r29
 20a:	58 df       	rcall	.-336    	; 0xbc <LCD_WriteData>
	LCD_WriteData('0'+j);
 20c:	80 e3       	ldi	r24, 0x30	; 48
 20e:	8c 0f       	add	r24, r28
	
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
	d = l%10;
	l /= 10;
	s = l%10;
	LCD_WriteData('0'+s);
	LCD_WriteData('0'+d);
	LCD_WriteData('0'+j);
 214:	53 cf       	rjmp	.-346    	; 0xbc <LCD_WriteData>

00000216 <lcdInt>:
	LCD_WriteData('0'+j);
	
}

void lcdInt(uint16_t number)
{
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	00 d0       	rcall	.+0      	; 0x220 <lcdInt+0xa>
 220:	00 d0       	rcall	.+0      	; 0x222 <lcdInt+0xc>
 222:	00 d0       	rcall	.+0      	; 0x224 <lcdInt+0xe>
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
 228:	8c 01       	movw	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 22a:	4a e0       	ldi	r20, 0x0A	; 10
 22c:	be 01       	movw	r22, r28
 22e:	6f 5f       	subi	r22, 0xFF	; 255
 230:	7f 4f       	sbci	r23, 0xFF	; 255
 232:	ab d1       	rcall	.+854    	; 0x58a <__itoa_ncheck>
	char str[6];
	itoa(number,str,10);
	if (number < 10)
 234:	0a 30       	cpi	r16, 0x0A	; 10
 236:	11 05       	cpc	r17, r1
 238:	10 f4       	brcc	.+4      	; 0x23e <lcdInt+0x28>
	{
		LCD_WriteData('0');
 23a:	80 e3       	ldi	r24, 0x30	; 48
 23c:	3f df       	rcall	.-386    	; 0xbc <LCD_WriteData>
	}
	LCD_WriteText(str);
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	3e df       	rcall	.-388    	; 0xc0 <LCD_WriteText>
}
 244:	26 96       	adiw	r28, 0x06	; 6
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <adcInit>:

void adcInit(void)
{
	//Internal 1.1 reference voltage, temperature sensor;
	ADMUX = _BV(REFS1)|_BV(REFS0)|_BV(MUX3);
 25a:	88 ec       	ldi	r24, 0xC8	; 200
 25c:	80 93 7c 00 	sts	0x007C, r24
	ADCSRB = 0;
 260:	10 92 7b 00 	sts	0x007B, r1
	ADCSRA = _BV(ADEN)|_BV(ADSC)|_BV(ADATE)|_BV(ADPS2)|_BV(ADPS1);
 264:	86 ee       	ldi	r24, 0xE6	; 230
 266:	80 93 7a 00 	sts	0x007A, r24
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));	
 26a:	80 91 7a 00 	lds	r24, 0x007A
 26e:	84 ff       	sbrs	r24, 4
 270:	fc cf       	rjmp	.-8      	; 0x26a <adcInit+0x10>
}
 272:	08 95       	ret

00000274 <readADCTemp>:

uint8_t readADCTemp(void)
{
	 return (uint8_t)(((uint16_t)ADC*(uint16_t)mem.t_alpha)/10)+mem.t_offset;
 274:	20 91 78 00 	lds	r18, 0x0078
 278:	30 91 79 00 	lds	r19, 0x0079
 27c:	ed e3       	ldi	r30, 0x3D	; 61
 27e:	f1 e0       	ldi	r31, 0x01	; 1
 280:	46 81       	ldd	r20, Z+6	; 0x06
 282:	42 9f       	mul	r20, r18
 284:	c0 01       	movw	r24, r0
 286:	43 9f       	mul	r20, r19
 288:	90 0d       	add	r25, r0
 28a:	11 24       	eor	r1, r1
 28c:	6a e0       	ldi	r22, 0x0A	; 10
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	68 d1       	rcall	.+720    	; 0x562 <__udivmodhi4>
 292:	87 81       	ldd	r24, Z+7	; 0x07
}
 294:	86 0f       	add	r24, r22
 296:	08 95       	ret

00000298 <initSequence>:




void initSequence(void)
{
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	89 e6       	ldi	r24, 0x69	; 105
 2a0:	98 e1       	ldi	r25, 0x18	; 24
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <initSequence+0xa>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <initSequence+0x14>
 2ac:	00 00       	nop
	_delay_ms(1000);
	eepromInit();
 2ae:	60 df       	rcall	.-320    	; 0x170 <eepromInit>
	ioInit();
 2b0:	7c df       	rcall	.-264    	; 0x1aa <ioInit>
	timerInit();
 2b2:	86 df       	rcall	.-244    	; 0x1c0 <timerInit>
	adcInit();
 2b4:	d2 df       	rcall	.-92     	; 0x25a <adcInit>
	readADCTemp();
 2b6:	de df       	rcall	.-68     	; 0x274 <readADCTemp>


void spiInit(void)
{
	//SPI mode 1; CPOL = 0; CPHA=1; clk/4
	SPCR = _BV(SPE)|_BV(MSTR)|_BV(CPHA);
 2b8:	84 e5       	ldi	r24, 0x54	; 84
 2ba:	8c bd       	out	0x2c, r24	; 44
	ioInit();
	timerInit();
	adcInit();
	readADCTemp();
	spiInit();
	setBacklight(mem.backlight);
 2bc:	cd e3       	ldi	r28, 0x3D	; 61
 2be:	d1 e0       	ldi	r29, 0x01	; 1
 2c0:	8c 81       	ldd	r24, Y+4	; 0x04
 2c2:	8b df       	rcall	.-234    	; 0x1da <setBacklight>
	setContrast(mem.contrast);
 2c4:	8d 81       	ldd	r24, Y+5	; 0x05
	OCR0B = brightnes;
	mem.backlight = brightnes;
}
void setContrast(uint8_t contrast)
{
	OCR0A = contrast;
 2c6:	87 bd       	out	0x27, r24	; 39
	adcInit();
	readADCTemp();
	spiInit();
	setBacklight(mem.backlight);
	setContrast(mem.contrast);
	pinInterruptsInit();
 2c8:	82 df       	rcall	.-252    	; 0x1ce <pinInterruptsInit>
	//uart_init();	//9600 bod, 1bit stop, parity: none;
	LCD_Init();
 2ca:	14 df       	rcall	.-472    	; 0xf4 <LCD_Init>
	LCD_Clear();
 2cc:	0a df       	rcall	.-492    	; 0xe2 <LCD_Clear>
	LCD_WriteText("  Reflow oven");
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	f6 de       	rcall	.-532    	; 0xc0 <LCD_WriteText>
	LCD_GoTo(0,1);
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	fe de       	rcall	.-516    	; 0xd6 <LCD_GoTo>
	LCD_WriteText("E.VT0.PL 2015 v0");
 2da:	8f e0       	ldi	r24, 0x0F	; 15
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	f0 de       	rcall	.-544    	; 0xc0 <LCD_WriteText>
 2e0:	2f ef       	ldi	r18, 0xFF	; 255
 2e2:	8d e3       	ldi	r24, 0x3D	; 61
 2e4:	99 e4       	ldi	r25, 0x49	; 73
 2e6:	21 50       	subi	r18, 0x01	; 1
 2e8:	80 40       	sbci	r24, 0x00	; 0
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <initSequence+0x4e>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <initSequence+0x58>
 2f0:	00 00       	nop
	_delay_ms(3000);
	LCD_Clear();
 2f2:	f7 de       	rcall	.-530    	; 0xe2 <LCD_Clear>
	LCD_WriteText("Pow: Bcl: Con:");
 2f4:	80 e2       	ldi	r24, 0x20	; 32
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	e3 de       	rcall	.-570    	; 0xc0 <LCD_WriteText>
	LCD_GoTo(0,1);
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	eb de       	rcall	.-554    	; 0xd6 <LCD_GoTo>
	lcdInt(mem.powerup);
 300:	88 81       	ld	r24, Y
 302:	99 81       	ldd	r25, Y+1	; 0x01
 304:	88 df       	rcall	.-240    	; 0x216 <lcdInt>
	LCD_GoTo(5,1);
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	85 e0       	ldi	r24, 0x05	; 5
 30a:	e5 de       	rcall	.-566    	; 0xd6 <LCD_GoTo>
	lcdInt(mem.backlight);
 30c:	8c 81       	ldd	r24, Y+4	; 0x04
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	82 df       	rcall	.-252    	; 0x216 <lcdInt>
	LCD_GoTo(10,1);
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	8a e0       	ldi	r24, 0x0A	; 10
 316:	df de       	rcall	.-578    	; 0xd6 <LCD_GoTo>
	lcdInt(mem.contrast);
 318:	8d 81       	ldd	r24, Y+5	; 0x05
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	7c df       	rcall	.-264    	; 0x216 <lcdInt>
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	8d e3       	ldi	r24, 0x3D	; 61
 322:	99 e4       	ldi	r25, 0x49	; 73
 324:	21 50       	subi	r18, 0x01	; 1
 326:	80 40       	sbci	r24, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <initSequence+0x8c>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <initSequence+0x96>
 32e:	00 00       	nop
	_delay_ms(3000);
	LCD_Clear();	
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
	LCD_GoTo(5,1);
	lcdInt(mem.backlight);
	LCD_GoTo(10,1);
	lcdInt(mem.contrast);
	_delay_ms(3000);
	LCD_Clear();	
 334:	d6 ce       	rjmp	.-596    	; 0xe2 <LCD_Clear>

00000336 <spiByte>:
}

uint8_t spiByte(uint8_t data)
{
	// Start transmission (MOSI)
	SPDR = data;
 336:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
 338:	0d b4       	in	r0, 0x2d	; 45
 33a:	07 fe       	sbrs	r0, 7
 33c:	fd cf       	rjmp	.-6      	; 0x338 <spiByte+0x2>
	// Get return Value;
	return SPDR;
 33e:	8e b5       	in	r24, 0x2e	; 46
}
 340:	08 95       	ret

00000342 <max6675Read>:

uint16_t max6675Read(void)
{
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
	uint16_t max6675Data;
	PORTB &= ~_BV(PB2); //CS LOW
 346:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 348:	22 e0       	ldi	r18, 0x02	; 2
 34a:	2a 95       	dec	r18
 34c:	f1 f7       	brne	.-4      	; 0x34a <max6675Read+0x8>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <max6675Read+0xe>
	_delay_us(1);
	max6675Data = (spiByte(0) << 8);
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	f1 df       	rcall	.-30     	; 0x336 <spiByte>
 354:	c8 2f       	mov	r28, r24
 356:	d0 e0       	ldi	r29, 0x00	; 0
 358:	dc 2f       	mov	r29, r28
 35a:	cc 27       	eor	r28, r28
	max6675Data |= (spiByte(0) & 0xFF);
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	eb df       	rcall	.-42     	; 0x336 <spiByte>
 360:	32 e0       	ldi	r19, 0x02	; 2
 362:	3a 95       	dec	r19
 364:	f1 f7       	brne	.-4      	; 0x362 <max6675Read+0x20>
 366:	00 c0       	rjmp	.+0      	; 0x368 <max6675Read+0x26>
	_delay_us(1);
	PORTB |= _BV(PB2); //CS HIGH
 368:	2a 9a       	sbi	0x05, 2	; 5
	return max6675Data;
}
 36a:	9e 01       	movw	r18, r28
 36c:	28 2b       	or	r18, r24
 36e:	c9 01       	movw	r24, r18
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <LCD_WriteTemperature>:
{
	return (((max6675Data >> 3) & 0xFFF)/4);
}

void LCD_WriteTemperature(uint16_t max6675Data)
{
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
	if(max6675Data & _BV(2))
 37a:	82 ff       	sbrs	r24, 2
 37c:	05 c0       	rjmp	.+10     	; 0x388 <LCD_WriteTemperature+0x12>
	{
		LCD_WriteText("NO PROBE ");
 37e:	8f e2       	ldi	r24, 0x2F	; 47
 380:	91 e0       	ldi	r25, 0x01	; 1
		LCD_WriteData('.');
		lcdInt( ((max6675Data >> 3) & 0x3)*25 );
		LCD_WriteData(223);
		LCD_WriteData('C');
	}
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28

void LCD_WriteTemperature(uint16_t max6675Data)
{
	if(max6675Data & _BV(2))
	{
		LCD_WriteText("NO PROBE ");
 386:	9c ce       	rjmp	.-712    	; 0xc0 <LCD_WriteText>
	}
	else
	{	
		lcd8t((((max6675Data >> 3) & 0xFFF)/4));
 388:	ec 01       	movw	r28, r24
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	d6 95       	lsr	r29
 38e:	c7 95       	ror	r28
 390:	8a 95       	dec	r24
 392:	e1 f7       	brne	.-8      	; 0x38c <LCD_WriteTemperature+0x16>
 394:	ce 01       	movw	r24, r28
 396:	96 95       	lsr	r25
 398:	87 95       	ror	r24
 39a:	96 95       	lsr	r25
 39c:	87 95       	ror	r24
 39e:	27 df       	rcall	.-434    	; 0x1ee <lcd8t>
		LCD_WriteData('.');
 3a0:	8e e2       	ldi	r24, 0x2E	; 46
 3a2:	8c de       	rcall	.-744    	; 0xbc <LCD_WriteData>
		lcdInt( ((max6675Data >> 3) & 0x3)*25 );
 3a4:	c3 70       	andi	r28, 0x03	; 3
 3a6:	dd 27       	eor	r29, r29
 3a8:	89 e1       	ldi	r24, 0x19	; 25
 3aa:	28 2f       	mov	r18, r24
 3ac:	2c 9f       	mul	r18, r28
 3ae:	c0 01       	movw	r24, r0
 3b0:	2d 9f       	mul	r18, r29
 3b2:	90 0d       	add	r25, r0
 3b4:	11 24       	eor	r1, r1
 3b6:	2f df       	rcall	.-418    	; 0x216 <lcdInt>
		LCD_WriteData(223);
 3b8:	8f ed       	ldi	r24, 0xDF	; 223
 3ba:	80 de       	rcall	.-768    	; 0xbc <LCD_WriteData>
		LCD_WriteData('C');
 3bc:	83 e4       	ldi	r24, 0x43	; 67
	}
}
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
	{	
		lcd8t((((max6675Data >> 3) & 0xFFF)/4));
		LCD_WriteData('.');
		lcdInt( ((max6675Data >> 3) & 0x3)*25 );
		LCD_WriteData(223);
		LCD_WriteData('C');
 3c2:	7c ce       	rjmp	.-776    	; 0xbc <LCD_WriteData>

000003c4 <main>:
volatile uint8_t state=1;
volatile uint16_t max6675Data;

int main(void)
{
	initSequence();
 3c4:	69 df       	rcall	.-302    	; 0x298 <initSequence>
	
	LCD_Clear();
 3c6:	8d de       	rcall	.-742    	; 0xe2 <LCD_Clear>
	sei();
 3c8:	78 94       	sei
	LCD_GoTo(12,0);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	8c e0       	ldi	r24, 0x0C	; 12
 3ce:	83 de       	rcall	.-762    	; 0xd6 <LCD_GoTo>
	LCD_WriteData(126);
 3d0:	8e e7       	ldi	r24, 0x7E	; 126
 3d2:	74 de       	rcall	.-792    	; 0xbc <LCD_WriteData>
    while(1)
    {
		if (max6675GetTemperature(max6675Read()) > 30)
 3d4:	b6 df       	rcall	.-148    	; 0x342 <max6675Read>
}

//Return temperature in Celcius 
uint16_t max6675GetTemperature(uint16_t max6675Data)
{
	return (((max6675Data >> 3) & 0xFFF)/4);
 3d6:	23 e0       	ldi	r18, 0x03	; 3
 3d8:	96 95       	lsr	r25
 3da:	87 95       	ror	r24
 3dc:	2a 95       	dec	r18
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0x14>
 3e0:	9f 70       	andi	r25, 0x0F	; 15
	sei();
	LCD_GoTo(12,0);
	LCD_WriteData(126);
    while(1)
    {
		if (max6675GetTemperature(max6675Read()) > 30)
 3e2:	8c 37       	cpi	r24, 0x7C	; 124
 3e4:	91 05       	cpc	r25, r1
 3e6:	10 f0       	brcs	.+4      	; 0x3ec <main+0x28>
	PORTD |= _BV(PD0);
}

inline void heaterOff(void)
{
	PORTD &= ~_BV(PD0);
 3e8:	58 98       	cbi	0x0b, 0	; 11
 3ea:	01 c0       	rjmp	.+2      	; 0x3ee <main+0x2a>
	}
}

inline void heaterOn(void)
{
	PORTD |= _BV(PD0);
 3ec:	58 9a       	sbi	0x0b, 0	; 11
		}
		else
		{
			heaterOn();
		}
		LCD_GoTo(0,0);
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	71 de       	rcall	.-798    	; 0xd6 <LCD_GoTo>
		LCD_WriteTemperature(max6675Read());
 3f4:	a6 df       	rcall	.-180    	; 0x342 <max6675Read>
 3f6:	bf df       	rcall	.-130    	; 0x376 <LCD_WriteTemperature>
		LCD_GoTo(0,1);
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	6c de       	rcall	.-808    	; 0xd6 <LCD_GoTo>
		lcdInt(readADCTemp());
 3fe:	3a df       	rcall	.-396    	; 0x274 <readADCTemp>
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	09 df       	rcall	.-494    	; 0x216 <lcdInt>
		LCD_GoTo(13,0);
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	8d e0       	ldi	r24, 0x0D	; 13
 408:	66 de       	rcall	.-820    	; 0xd6 <LCD_GoTo>
		lcd8t(mem.backlight);
 40a:	80 91 41 01 	lds	r24, 0x0141
 40e:	ef de       	rcall	.-546    	; 0x1ee <lcd8t>
		LCD_GoTo(13,1);
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	8d e0       	ldi	r24, 0x0D	; 13
 414:	60 de       	rcall	.-832    	; 0xd6 <LCD_GoTo>
		lcd8t(mem.contrast);
 416:	80 91 42 01 	lds	r24, 0x0142
 41a:	e9 de       	rcall	.-558    	; 0x1ee <lcd8t>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41c:	2f ef       	ldi	r18, 0xFF	; 255
 41e:	81 ee       	ldi	r24, 0xE1	; 225
 420:	94 e0       	ldi	r25, 0x04	; 4
 422:	21 50       	subi	r18, 0x01	; 1
 424:	80 40       	sbci	r24, 0x00	; 0
 426:	90 40       	sbci	r25, 0x00	; 0
 428:	e1 f7       	brne	.-8      	; 0x422 <main+0x5e>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <main+0x68>
 42c:	00 00       	nop
 42e:	d2 cf       	rjmp	.-92     	; 0x3d4 <main+0x10>

00000430 <__vector_1>:
}

// INTERRUPTS

ISR(INT0_vect)
{
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	2f 93       	push	r18
 43c:	3f 93       	push	r19
 43e:	4f 93       	push	r20
 440:	5f 93       	push	r21
 442:	6f 93       	push	r22
 444:	7f 93       	push	r23
 446:	8f 93       	push	r24
 448:	9f 93       	push	r25
 44a:	af 93       	push	r26
 44c:	bf 93       	push	r27
 44e:	ef 93       	push	r30
 450:	ff 93       	push	r31
	state = (state+1) % 2;
 452:	80 91 00 01 	lds	r24, 0x0100
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	81 70       	andi	r24, 0x01	; 1
 45c:	99 27       	eor	r25, r25
 45e:	80 93 00 01 	sts	0x0100, r24
	if (state)
 462:	80 91 00 01 	lds	r24, 0x0100
 466:	88 23       	and	r24, r24
 468:	71 f0       	breq	.+28     	; 0x486 <__vector_1+0x56>
	{
		encoderPosition = mem.backlight;
 46a:	80 91 41 01 	lds	r24, 0x0141
 46e:	80 93 3a 01 	sts	0x013A, r24
		LCD_GoTo(12,0);
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	8c e0       	ldi	r24, 0x0C	; 12
 476:	2f de       	rcall	.-930    	; 0xd6 <LCD_GoTo>
		LCD_WriteData(126);
 478:	8e e7       	ldi	r24, 0x7E	; 126
 47a:	20 de       	rcall	.-960    	; 0xbc <LCD_WriteData>
		LCD_GoTo(12,1);
 47c:	61 e0       	ldi	r22, 0x01	; 1
 47e:	8c e0       	ldi	r24, 0x0C	; 12
 480:	2a de       	rcall	.-940    	; 0xd6 <LCD_GoTo>
		LCD_WriteData(32);
 482:	80 e2       	ldi	r24, 0x20	; 32
 484:	0d c0       	rjmp	.+26     	; 0x4a0 <__vector_1+0x70>
	} 
	else
	{
		encoderPosition = mem.contrast;
 486:	80 91 42 01 	lds	r24, 0x0142
 48a:	80 93 3a 01 	sts	0x013A, r24
		LCD_GoTo(12,0);
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	8c e0       	ldi	r24, 0x0C	; 12
 492:	21 de       	rcall	.-958    	; 0xd6 <LCD_GoTo>
		LCD_WriteData(32);
 494:	80 e2       	ldi	r24, 0x20	; 32
 496:	12 de       	rcall	.-988    	; 0xbc <LCD_WriteData>
		LCD_GoTo(12,1);
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	8c e0       	ldi	r24, 0x0C	; 12
 49c:	1c de       	rcall	.-968    	; 0xd6 <LCD_GoTo>
		LCD_WriteData(126);
 49e:	8e e7       	ldi	r24, 0x7E	; 126
 4a0:	0d de       	rcall	.-998    	; 0xbc <LCD_WriteData>
	}
	eepromSave();
 4a2:	5f de       	rcall	.-834    	; 0x162 <eepromSave>
}
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	bf 91       	pop	r27
 4aa:	af 91       	pop	r26
 4ac:	9f 91       	pop	r25
 4ae:	8f 91       	pop	r24
 4b0:	7f 91       	pop	r23
 4b2:	6f 91       	pop	r22
 4b4:	5f 91       	pop	r21
 4b6:	4f 91       	pop	r20
 4b8:	3f 91       	pop	r19
 4ba:	2f 91       	pop	r18
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <__vector_2>:

ISR(INT1_vect)
{
 4c6:	1f 92       	push	r1
 4c8:	0f 92       	push	r0
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	0f 92       	push	r0
 4ce:	11 24       	eor	r1, r1
 4d0:	2f 93       	push	r18
 4d2:	3f 93       	push	r19
 4d4:	4f 93       	push	r20
 4d6:	5f 93       	push	r21
 4d8:	6f 93       	push	r22
 4da:	7f 93       	push	r23
 4dc:	8f 93       	push	r24
 4de:	9f 93       	push	r25
 4e0:	af 93       	push	r26
 4e2:	bf 93       	push	r27
 4e4:	ef 93       	push	r30
 4e6:	ff 93       	push	r31
	if (PIND & _BV(PD4))
 4e8:	4c 9b       	sbis	0x09, 4	; 9
 4ea:	08 c0       	rjmp	.+16     	; 0x4fc <__vector_2+0x36>
	{
		if (encoderPosition>0)
 4ec:	80 91 3a 01 	lds	r24, 0x013A
 4f0:	88 23       	and	r24, r24
 4f2:	69 f0       	breq	.+26     	; 0x50e <__stack+0xf>
		encoderPosition--;
 4f4:	80 91 3a 01 	lds	r24, 0x013A
 4f8:	81 50       	subi	r24, 0x01	; 1
 4fa:	07 c0       	rjmp	.+14     	; 0x50a <__stack+0xb>
	}
	else
	{
		if (encoderPosition<255)
 4fc:	80 91 3a 01 	lds	r24, 0x013A
 500:	8f 3f       	cpi	r24, 0xFF	; 255
 502:	29 f0       	breq	.+10     	; 0x50e <__stack+0xf>
		encoderPosition++;
 504:	80 91 3a 01 	lds	r24, 0x013A
 508:	8f 5f       	subi	r24, 0xFF	; 255
 50a:	80 93 3a 01 	sts	0x013A, r24
	}
	//
	if(state)
 50e:	80 91 00 01 	lds	r24, 0x0100
 512:	88 23       	and	r24, r24
 514:	21 f0       	breq	.+8      	; 0x51e <__stack+0x1f>
	{
		setBacklight(encoderPosition);
 516:	80 91 3a 01 	lds	r24, 0x013A
 51a:	5f de       	rcall	.-834    	; 0x1da <setBacklight>
 51c:	05 c0       	rjmp	.+10     	; 0x528 <__stack+0x29>
	}
	else
	{
		setContrast(encoderPosition);
 51e:	80 91 3a 01 	lds	r24, 0x013A
	OCR0B = brightnes;
	mem.backlight = brightnes;
}
void setContrast(uint8_t contrast)
{
	OCR0A = contrast;
 522:	87 bd       	out	0x27, r24	; 39
	mem.contrast = contrast;
 524:	80 93 42 01 	sts	0x0142, r24
		setContrast(encoderPosition);
		
		
	}
	
}
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	bf 91       	pop	r27
 52e:	af 91       	pop	r26
 530:	9f 91       	pop	r25
 532:	8f 91       	pop	r24
 534:	7f 91       	pop	r23
 536:	6f 91       	pop	r22
 538:	5f 91       	pop	r21
 53a:	4f 91       	pop	r20
 53c:	3f 91       	pop	r19
 53e:	2f 91       	pop	r18
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <__udivmodqi4>:
 54a:	99 1b       	sub	r25, r25
 54c:	79 e0       	ldi	r23, 0x09	; 9
 54e:	04 c0       	rjmp	.+8      	; 0x558 <__udivmodqi4_ep>

00000550 <__udivmodqi4_loop>:
 550:	99 1f       	adc	r25, r25
 552:	96 17       	cp	r25, r22
 554:	08 f0       	brcs	.+2      	; 0x558 <__udivmodqi4_ep>
 556:	96 1b       	sub	r25, r22

00000558 <__udivmodqi4_ep>:
 558:	88 1f       	adc	r24, r24
 55a:	7a 95       	dec	r23
 55c:	c9 f7       	brne	.-14     	; 0x550 <__udivmodqi4_loop>
 55e:	80 95       	com	r24
 560:	08 95       	ret

00000562 <__udivmodhi4>:
 562:	aa 1b       	sub	r26, r26
 564:	bb 1b       	sub	r27, r27
 566:	51 e1       	ldi	r21, 0x11	; 17
 568:	07 c0       	rjmp	.+14     	; 0x578 <__udivmodhi4_ep>

0000056a <__udivmodhi4_loop>:
 56a:	aa 1f       	adc	r26, r26
 56c:	bb 1f       	adc	r27, r27
 56e:	a6 17       	cp	r26, r22
 570:	b7 07       	cpc	r27, r23
 572:	10 f0       	brcs	.+4      	; 0x578 <__udivmodhi4_ep>
 574:	a6 1b       	sub	r26, r22
 576:	b7 0b       	sbc	r27, r23

00000578 <__udivmodhi4_ep>:
 578:	88 1f       	adc	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	5a 95       	dec	r21
 57e:	a9 f7       	brne	.-22     	; 0x56a <__udivmodhi4_loop>
 580:	80 95       	com	r24
 582:	90 95       	com	r25
 584:	bc 01       	movw	r22, r24
 586:	cd 01       	movw	r24, r26
 588:	08 95       	ret

0000058a <__itoa_ncheck>:
 58a:	bb 27       	eor	r27, r27
 58c:	4a 30       	cpi	r20, 0x0A	; 10
 58e:	31 f4       	brne	.+12     	; 0x59c <__itoa_ncheck+0x12>
 590:	99 23       	and	r25, r25
 592:	22 f4       	brpl	.+8      	; 0x59c <__itoa_ncheck+0x12>
 594:	bd e2       	ldi	r27, 0x2D	; 45
 596:	90 95       	com	r25
 598:	81 95       	neg	r24
 59a:	9f 4f       	sbci	r25, 0xFF	; 255
 59c:	01 c0       	rjmp	.+2      	; 0x5a0 <__utoa_common>

0000059e <__utoa_ncheck>:
 59e:	bb 27       	eor	r27, r27

000005a0 <__utoa_common>:
 5a0:	fb 01       	movw	r30, r22
 5a2:	55 27       	eor	r21, r21
 5a4:	aa 27       	eor	r26, r26
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	aa 1f       	adc	r26, r26
 5ac:	a4 17       	cp	r26, r20
 5ae:	10 f0       	brcs	.+4      	; 0x5b4 <__utoa_common+0x14>
 5b0:	a4 1b       	sub	r26, r20
 5b2:	83 95       	inc	r24
 5b4:	50 51       	subi	r21, 0x10	; 16
 5b6:	b9 f7       	brne	.-18     	; 0x5a6 <__utoa_common+0x6>
 5b8:	a0 5d       	subi	r26, 0xD0	; 208
 5ba:	aa 33       	cpi	r26, 0x3A	; 58
 5bc:	08 f0       	brcs	.+2      	; 0x5c0 <__utoa_common+0x20>
 5be:	a9 5d       	subi	r26, 0xD9	; 217
 5c0:	a1 93       	st	Z+, r26
 5c2:	00 97       	sbiw	r24, 0x00	; 0
 5c4:	79 f7       	brne	.-34     	; 0x5a4 <__utoa_common+0x4>
 5c6:	b1 11       	cpse	r27, r1
 5c8:	b1 93       	st	Z+, r27
 5ca:	11 92       	st	Z+, r1
 5cc:	cb 01       	movw	r24, r22
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <strrev>

000005d0 <strrev>:
 5d0:	dc 01       	movw	r26, r24
 5d2:	fc 01       	movw	r30, r24
 5d4:	67 2f       	mov	r22, r23
 5d6:	71 91       	ld	r23, Z+
 5d8:	77 23       	and	r23, r23
 5da:	e1 f7       	brne	.-8      	; 0x5d4 <strrev+0x4>
 5dc:	32 97       	sbiw	r30, 0x02	; 2
 5de:	04 c0       	rjmp	.+8      	; 0x5e8 <strrev+0x18>
 5e0:	7c 91       	ld	r23, X
 5e2:	6d 93       	st	X+, r22
 5e4:	70 83       	st	Z, r23
 5e6:	62 91       	ld	r22, -Z
 5e8:	ae 17       	cp	r26, r30
 5ea:	bf 07       	cpc	r27, r31
 5ec:	c8 f3       	brcs	.-14     	; 0x5e0 <strrev+0x10>
 5ee:	08 95       	ret

000005f0 <eeprom_read_block>:
 5f0:	dc 01       	movw	r26, r24
 5f2:	cb 01       	movw	r24, r22

000005f4 <eeprom_read_blraw>:
 5f4:	fc 01       	movw	r30, r24
 5f6:	f9 99       	sbic	0x1f, 1	; 31
 5f8:	fe cf       	rjmp	.-4      	; 0x5f6 <eeprom_read_blraw+0x2>
 5fa:	06 c0       	rjmp	.+12     	; 0x608 <eeprom_read_blraw+0x14>
 5fc:	f2 bd       	out	0x22, r31	; 34
 5fe:	e1 bd       	out	0x21, r30	; 33
 600:	f8 9a       	sbi	0x1f, 0	; 31
 602:	31 96       	adiw	r30, 0x01	; 1
 604:	00 b4       	in	r0, 0x20	; 32
 606:	0d 92       	st	X+, r0
 608:	41 50       	subi	r20, 0x01	; 1
 60a:	50 40       	sbci	r21, 0x00	; 0
 60c:	b8 f7       	brcc	.-18     	; 0x5fc <eeprom_read_blraw+0x8>
 60e:	08 95       	ret

00000610 <eeprom_update_block>:
 610:	dc 01       	movw	r26, r24
 612:	a4 0f       	add	r26, r20
 614:	b5 1f       	adc	r27, r21
 616:	41 50       	subi	r20, 0x01	; 1
 618:	50 40       	sbci	r21, 0x00	; 0
 61a:	40 f0       	brcs	.+16     	; 0x62c <eeprom_update_block+0x1c>
 61c:	cb 01       	movw	r24, r22
 61e:	84 0f       	add	r24, r20
 620:	95 1f       	adc	r25, r21
 622:	2e 91       	ld	r18, -X
 624:	05 d0       	rcall	.+10     	; 0x630 <eeprom_update_r18>
 626:	41 50       	subi	r20, 0x01	; 1
 628:	50 40       	sbci	r21, 0x00	; 0
 62a:	d8 f7       	brcc	.-10     	; 0x622 <eeprom_update_block+0x12>
 62c:	08 95       	ret

0000062e <eeprom_update_byte>:
 62e:	26 2f       	mov	r18, r22

00000630 <eeprom_update_r18>:
 630:	f9 99       	sbic	0x1f, 1	; 31
 632:	fe cf       	rjmp	.-4      	; 0x630 <eeprom_update_r18>
 634:	92 bd       	out	0x22, r25	; 34
 636:	81 bd       	out	0x21, r24	; 33
 638:	f8 9a       	sbi	0x1f, 0	; 31
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	00 b4       	in	r0, 0x20	; 32
 63e:	02 16       	cp	r0, r18
 640:	39 f0       	breq	.+14     	; 0x650 <eeprom_update_r18+0x20>
 642:	1f ba       	out	0x1f, r1	; 31
 644:	20 bd       	out	0x20, r18	; 32
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	f8 94       	cli
 64a:	fa 9a       	sbi	0x1f, 2	; 31
 64c:	f9 9a       	sbi	0x1f, 1	; 31
 64e:	0f be       	out	0x3f, r0	; 63
 650:	08 95       	ret

00000652 <_exit>:
 652:	f8 94       	cli

00000654 <__stop_program>:
 654:	ff cf       	rjmp	.-2      	; 0x654 <__stop_program>
