
reflow_oven.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000005e8  0000069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800138  00800138  000006d4  2**0
                  ALLOC
  3 .eeprom       00000008  00810000  00810000  000006d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000130  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001230  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005c9  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000640  00000000  00000000  00002075  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000320  00000000  00000000  000026b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000428  00000000  00000000  000029d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000809  00000000  00000000  00002e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000128  00000000  00000000  00003609  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	eb c1       	rjmp	.+982    	; 0x3da <__vector_1>
   4:	35 c2       	rjmp	.+1130   	; 0x470 <__vector_2>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e8 ee       	ldi	r30, 0xE8	; 232
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a8 33       	cpi	r26, 0x38	; 56
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a8 e3       	ldi	r26, 0x38	; 56
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a5 34       	cpi	r26, 0x45	; 69
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	94 d1       	rcall	.+808    	; 0x390 <main>
  68:	bd c2       	rjmp	.+1402   	; 0x5e4 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <_LCD_OutNibble>:
// Funkcja wystawiaj¹ca pó³bajt na magistralê danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
  6c:	80 ff       	sbrs	r24, 0
  6e:	02 c0       	rjmp	.+4      	; 0x74 <_LCD_OutNibble+0x8>
	LCD_DB4_PORT |= LCD_DB4;
  70:	43 9a       	sbi	0x08, 3	; 8
  72:	01 c0       	rjmp	.+2      	; 0x76 <_LCD_OutNibble+0xa>
else
	LCD_DB4_PORT  &= ~LCD_DB4;
  74:	43 98       	cbi	0x08, 3	; 8

if(nibbleToWrite & 0x02)
  76:	81 ff       	sbrs	r24, 1
  78:	02 c0       	rjmp	.+4      	; 0x7e <_LCD_OutNibble+0x12>
	LCD_DB5_PORT |= LCD_DB5;
  7a:	42 9a       	sbi	0x08, 2	; 8
  7c:	01 c0       	rjmp	.+2      	; 0x80 <_LCD_OutNibble+0x14>
else
	LCD_DB5_PORT  &= ~LCD_DB5;
  7e:	42 98       	cbi	0x08, 2	; 8

if(nibbleToWrite & 0x04)
  80:	82 ff       	sbrs	r24, 2
  82:	02 c0       	rjmp	.+4      	; 0x88 <_LCD_OutNibble+0x1c>
	LCD_DB6_PORT |= LCD_DB6;
  84:	41 9a       	sbi	0x08, 1	; 8
  86:	01 c0       	rjmp	.+2      	; 0x8a <_LCD_OutNibble+0x1e>
else
	LCD_DB6_PORT  &= ~LCD_DB6;
  88:	41 98       	cbi	0x08, 1	; 8

if(nibbleToWrite & 0x08)
  8a:	83 ff       	sbrs	r24, 3
  8c:	02 c0       	rjmp	.+4      	; 0x92 <_LCD_OutNibble+0x26>
	LCD_DB7_PORT |= LCD_DB7;
  8e:	40 9a       	sbi	0x08, 0	; 8
  90:	08 95       	ret
else
	LCD_DB7_PORT  &= ~LCD_DB7;
  92:	40 98       	cbi	0x08, 0	; 8
  94:	08 95       	ret

00000096 <_LCD_Write>:
//
// Funkcja zapisu bajtu do wyœwietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
  96:	cf 93       	push	r28
  98:	c8 2f       	mov	r28, r24
LCD_E_PORT |= LCD_E;
  9a:	28 9a       	sbi	0x05, 0	; 5
_LCD_OutNibble(dataToWrite >> 4);
  9c:	82 95       	swap	r24
  9e:	8f 70       	andi	r24, 0x0F	; 15
  a0:	e5 df       	rcall	.-54     	; 0x6c <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
  a2:	28 98       	cbi	0x05, 0	; 5
LCD_E_PORT |= LCD_E;
  a4:	28 9a       	sbi	0x05, 0	; 5
_LCD_OutNibble(dataToWrite);
  a6:	8c 2f       	mov	r24, r28
  a8:	e1 df       	rcall	.-62     	; 0x6c <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
  aa:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	85 e8       	ldi	r24, 0x85	; 133
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <_LCD_Write+0x18>
  b2:	00 00       	nop
_delay_us(50);
}
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <LCD_WriteCommand>:
// Funkcja zapisu rozkazu do wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
  b8:	5f 98       	cbi	0x0b, 7	; 11
_LCD_Write(commandToWrite);
  ba:	ed cf       	rjmp	.-38     	; 0x96 <_LCD_Write>

000000bc <LCD_WriteData>:
// Funkcja zapisu danych do pamiêci wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
  bc:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_Write(dataToWrite);
  be:	eb cf       	rjmp	.-42     	; 0x96 <_LCD_Write>

000000c0 <LCD_WriteText>:
//
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	ec 01       	movw	r28, r24
while(*text)
  c6:	89 91       	ld	r24, Y+
  c8:	88 23       	and	r24, r24
  ca:	11 f0       	breq	.+4      	; 0xd0 <LCD_WriteText+0x10>
  LCD_WriteData(*text++);
  cc:	f7 df       	rcall	.-18     	; 0xbc <LCD_WriteData>
  ce:	fb cf       	rjmp	.-10     	; 0xc6 <LCD_WriteText+0x6>
}
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <LCD_GoTo>:
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
  d6:	90 e4       	ldi	r25, 0x40	; 64
  d8:	69 9f       	mul	r22, r25
  da:	80 0d       	add	r24, r0
  dc:	11 24       	eor	r1, r1
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	eb cf       	rjmp	.-42     	; 0xb8 <LCD_WriteCommand>

000000e2 <LCD_Clear>:
// Funkcja czyszczenia ekranu wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Clear(void)
{
LCD_WriteCommand(HD44780_CLEAR);
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	e9 df       	rcall	.-46     	; 0xb8 <LCD_WriteCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	8f e9       	ldi	r24, 0x9F	; 159
  e8:	9f e0       	ldi	r25, 0x0F	; 15
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_Clear+0x8>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_Clear+0xe>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <LCD_Init>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Init(void)
{
  f4:	cf 93       	push	r28
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
  f6:	3b 9a       	sbi	0x07, 3	; 7
LCD_DB5_DIR |= LCD_DB5; //
  f8:	3a 9a       	sbi	0x07, 2	; 7
LCD_DB6_DIR |= LCD_DB6; //
  fa:	39 9a       	sbi	0x07, 1	; 7
LCD_DB7_DIR |= LCD_DB7; //
  fc:	38 9a       	sbi	0x07, 0	; 7
LCD_E_DIR 	|= LCD_E;   //
  fe:	20 9a       	sbi	0x04, 0	; 4
LCD_RS_DIR 	|= LCD_RS;  //
 100:	57 9a       	sbi	0x0a, 7	; 10
 102:	8f e2       	ldi	r24, 0x2F	; 47
 104:	95 e7       	ldi	r25, 0x75	; 117
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_Init+0x12>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_Init+0x18>
 10c:	00 00       	nop
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 10e:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 110:	28 98       	cbi	0x05, 0	; 5
 112:	c3 e0       	ldi	r28, 0x03	; 3

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
  {
  LCD_E_PORT |= LCD_E; //  E = 1
 114:	28 9a       	sbi	0x05, 0	; 5
  _LCD_OutNibble(0x03); // tryb 8-bitowy
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	a9 df       	rcall	.-174    	; 0x6c <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
 11a:	28 98       	cbi	0x05, 0	; 5
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	97 e2       	ldi	r25, 0x27	; 39
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_Init+0x2c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_Init+0x32>
 126:	00 00       	nop
 128:	c1 50       	subi	r28, 0x01	; 1
LCD_RS_DIR 	|= LCD_RS;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 12a:	a1 f7       	brne	.-24     	; 0x114 <LCD_Init+0x20>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
 12c:	28 9a       	sbi	0x05, 0	; 5
_LCD_OutNibble(0x02); // tryb 4-bitowy
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	9d df       	rcall	.-198    	; 0x6c <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
 132:	28 98       	cbi	0x05, 0	; 5
 134:	8f ec       	ldi	r24, 0xCF	; 207
 136:	97 e0       	ldi	r25, 0x07	; 7
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_Init+0x44>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_Init+0x4a>
 13e:	00 00       	nop

_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 140:	88 e2       	ldi	r24, 0x28	; 40
 142:	ba df       	rcall	.-140    	; 0xb8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 144:	88 e0       	ldi	r24, 0x08	; 8
 146:	b8 df       	rcall	.-144    	; 0xb8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	b6 df       	rcall	.-148    	; 0xb8 <LCD_WriteCommand>
 14c:	8f e9       	ldi	r24, 0x9F	; 159
 14e:	9f e0       	ldi	r25, 0x0F	; 15
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_Init+0x5c>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_Init+0x62>
 156:	00 00       	nop
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	ae df       	rcall	.-164    	; 0xb8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 15c:	8c e0       	ldi	r24, 0x0C	; 12
}
 15e:	cf 91       	pop	r28
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 160:	ab cf       	rjmp	.-170    	; 0xb8 <LCD_WriteCommand>

00000162 <eepromSave>:
	encoderPosition = mem.contrast;
}

void eepromSave(void)
{
	eeprom_update_block(&mem,&eemem,sizeof(eemem_t));
 162:	48 e0       	ldi	r20, 0x08	; 8
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	8c e3       	ldi	r24, 0x3C	; 60
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	19 c2       	rjmp	.+1074   	; 0x5a2 <eeprom_update_block>

00000170 <eepromInit>:
	_delay_ms(3000);
	LCD_Clear();	
}

void eepromInit(void)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
	eeprom_read_block(&mem, &eemem, sizeof(eemem_t));
 174:	48 e0       	ldi	r20, 0x08	; 8
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	8c e3       	ldi	r24, 0x3C	; 60
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	00 d2       	rcall	.+1024   	; 0x582 <eeprom_read_block>
	mem.powerup++;
 182:	cc e3       	ldi	r28, 0x3C	; 60
 184:	d1 e0       	ldi	r29, 0x01	; 1
 186:	88 81       	ld	r24, Y
 188:	99 81       	ldd	r25, Y+1	; 0x01
 18a:	aa 81       	ldd	r26, Y+2	; 0x02
 18c:	bb 81       	ldd	r27, Y+3	; 0x03
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	a1 1d       	adc	r26, r1
 192:	b1 1d       	adc	r27, r1
 194:	88 83       	st	Y, r24
 196:	99 83       	std	Y+1, r25	; 0x01
 198:	aa 83       	std	Y+2, r26	; 0x02
 19a:	bb 83       	std	Y+3, r27	; 0x03
	eepromSave();
 19c:	e2 df       	rcall	.-60     	; 0x162 <eepromSave>
	encoderPosition = mem.contrast;
 19e:	8d 81       	ldd	r24, Y+5	; 0x05
 1a0:	80 93 39 01 	sts	0x0139, r24
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <ioInit>:
	eeprom_update_block(&mem,&eemem,sizeof(eemem_t));
}

void ioInit(void)
{
	DDRC = 0xFF;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	87 b9       	out	0x07, r24	; 7
	DDRD = _BV(PD0)|_BV(PD1)|_BV(PD5)|_BV(PD6)|_BV(PD7);
 1ae:	83 ee       	ldi	r24, 0xE3	; 227
 1b0:	8a b9       	out	0x0a, r24	; 10
	DDRB = _BV(PB0)|_BV(PB1)|_BV(PB2)|_BV(PB3)|_BV(PB5)|_BV(PB6)|_BV(PB7);
 1b2:	8f ee       	ldi	r24, 0xEF	; 239
 1b4:	84 b9       	out	0x04, r24	; 4
	
	PORTC = 0;
 1b6:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;
 1b8:	1b b8       	out	0x0b, r1	; 11
	PORTB = _BV(PB2);
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	85 b9       	out	0x05, r24	; 5
 1be:	08 95       	ret

000001c0 <timerInit>:
}

void timerInit(void)
{
	//Timer 0 Fast PWM for backlight & contrast
	TCCR0A = _BV(COM0A1)|_BV(COM0B1)|_BV(WGM01)|_BV(WGM00);
 1c0:	83 ea       	ldi	r24, 0xA3	; 163
 1c2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS00);
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0;
 1c8:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 1ca:	18 bc       	out	0x28, r1	; 40
 1cc:	08 95       	ret

000001ce <pinInterruptsInit>:
}

void pinInterruptsInit(void)
{
	//INT0 on falling edge, INT1 on any edge
	EICRA = _BV(ISC11)|_BV(ISC01);
 1ce:	8a e0       	ldi	r24, 0x0A	; 10
 1d0:	80 93 69 00 	sts	0x0069, r24
	EIMSK = _BV(INT1)|_BV(INT0);
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	8d bb       	out	0x1d, r24	; 29
 1d8:	08 95       	ret

000001da <setBacklight>:
}

void setBacklight(uint8_t brightnes)
{
	if (brightnes)
 1da:	88 23       	and	r24, r24
 1dc:	19 f0       	breq	.+6      	; 0x1e4 <setBacklight+0xa>
	{
		TCCR0A = _BV(COM0A1)|_BV(COM0B1)|_BV(WGM01)|_BV(WGM00);
 1de:	93 ea       	ldi	r25, 0xA3	; 163
 1e0:	94 bd       	out	0x24, r25	; 36
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <setBacklight+0xc>
	} 
	else
	{
		TCCR0A = 0;
 1e4:	14 bc       	out	0x24, r1	; 36
	}
	OCR0B = brightnes;
 1e6:	88 bd       	out	0x28, r24	; 40
	mem.backlight = brightnes;
 1e8:	80 93 40 01 	sts	0x0140, r24
 1ec:	08 95       	ret

000001ee <lcdInt>:
	LCD_WriteData('0'+j);
	
}

void lcdInt(uint16_t number)
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	61 97       	sbiw	r28, 0x11	; 17
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 202:	4a e0       	ldi	r20, 0x0A	; 10
 204:	be 01       	movw	r22, r28
 206:	6f 5f       	subi	r22, 0xFF	; 255
 208:	7f 4f       	sbci	r23, 0xFF	; 255
 20a:	88 d1       	rcall	.+784    	; 0x51c <__itoa_ncheck>
	char str[17];
	itoa(number,str,10);
	LCD_WriteText(str);
 20c:	ce 01       	movw	r24, r28
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	57 df       	rcall	.-338    	; 0xc0 <LCD_WriteText>
}
 212:	61 96       	adiw	r28, 0x11	; 17
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <adcInit>:

void adcInit(void)
{
	//Internal 1.1 reference voltage, temperature sensor;
	ADMUX = _BV(REFS1)|_BV(REFS0)|_BV(MUX3);
 224:	88 ec       	ldi	r24, 0xC8	; 200
 226:	80 93 7c 00 	sts	0x007C, r24
	ADCSRB = 0;
 22a:	10 92 7b 00 	sts	0x007B, r1
	ADCSRA = _BV(ADEN)|_BV(ADSC)|_BV(ADATE)|_BV(ADPS2)|_BV(ADPS1);
 22e:	86 ee       	ldi	r24, 0xE6	; 230
 230:	80 93 7a 00 	sts	0x007A, r24
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));	
 234:	80 91 7a 00 	lds	r24, 0x007A
 238:	84 ff       	sbrs	r24, 4
 23a:	fc cf       	rjmp	.-8      	; 0x234 <adcInit+0x10>
}
 23c:	08 95       	ret

0000023e <readADCTemp>:

uint8_t readADCTemp(void)
{
	 return (uint8_t)(((uint16_t)ADC*(uint16_t)mem.t_alpha)/10)+mem.t_offset;
 23e:	20 91 78 00 	lds	r18, 0x0078
 242:	30 91 79 00 	lds	r19, 0x0079
 246:	ec e3       	ldi	r30, 0x3C	; 60
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	46 81       	ldd	r20, Z+6	; 0x06
 24c:	42 9f       	mul	r20, r18
 24e:	c0 01       	movw	r24, r0
 250:	43 9f       	mul	r20, r19
 252:	90 0d       	add	r25, r0
 254:	11 24       	eor	r1, r1
 256:	6a e0       	ldi	r22, 0x0A	; 10
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	4c d1       	rcall	.+664    	; 0x4f4 <__udivmodhi4>
 25c:	87 81       	ldd	r24, Z+7	; 0x07
}
 25e:	86 0f       	add	r24, r22
 260:	08 95       	ret

00000262 <initSequence>:




void initSequence(void)
{
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	89 e6       	ldi	r24, 0x69	; 105
 26a:	98 e1       	ldi	r25, 0x18	; 24
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <initSequence+0xa>
 274:	00 c0       	rjmp	.+0      	; 0x276 <initSequence+0x14>
 276:	00 00       	nop
	_delay_ms(1000);
	eepromInit();
 278:	7b df       	rcall	.-266    	; 0x170 <eepromInit>
	ioInit();
 27a:	97 df       	rcall	.-210    	; 0x1aa <ioInit>
	timerInit();
 27c:	a1 df       	rcall	.-190    	; 0x1c0 <timerInit>
	adcInit();
 27e:	d2 df       	rcall	.-92     	; 0x224 <adcInit>
	readADCTemp();
 280:	de df       	rcall	.-68     	; 0x23e <readADCTemp>


void spiInit(void)
{
	//SPI mode 1; CPOL = 0; CPHA=1; clk/4
	SPCR = _BV(SPE)|_BV(MSTR)|_BV(CPHA);
 282:	84 e5       	ldi	r24, 0x54	; 84
 284:	8c bd       	out	0x2c, r24	; 44
	ioInit();
	timerInit();
	adcInit();
	readADCTemp();
	spiInit();
	setBacklight(mem.backlight);
 286:	cc e3       	ldi	r28, 0x3C	; 60
 288:	d1 e0       	ldi	r29, 0x01	; 1
 28a:	8c 81       	ldd	r24, Y+4	; 0x04
 28c:	a6 df       	rcall	.-180    	; 0x1da <setBacklight>
	setContrast(mem.contrast);
 28e:	8d 81       	ldd	r24, Y+5	; 0x05
	OCR0B = brightnes;
	mem.backlight = brightnes;
}
void setContrast(uint8_t contrast)
{
	OCR0A = contrast;
 290:	87 bd       	out	0x27, r24	; 39
	adcInit();
	readADCTemp();
	spiInit();
	setBacklight(mem.backlight);
	setContrast(mem.contrast);
	pinInterruptsInit();
 292:	9d df       	rcall	.-198    	; 0x1ce <pinInterruptsInit>
	//uart_init();	//9600 bod, 1bit stop, parity: none;
	LCD_Init();
 294:	2f df       	rcall	.-418    	; 0xf4 <LCD_Init>
	LCD_Clear();
 296:	25 df       	rcall	.-438    	; 0xe2 <LCD_Clear>
	LCD_WriteText("  Reflow oven");
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	11 df       	rcall	.-478    	; 0xc0 <LCD_WriteText>
	LCD_GoTo(0,1);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	19 df       	rcall	.-462    	; 0xd6 <LCD_GoTo>
	LCD_WriteText("E.VT0.PL 2015 v0");
 2a4:	8e e0       	ldi	r24, 0x0E	; 14
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	0b df       	rcall	.-490    	; 0xc0 <LCD_WriteText>
 2aa:	2f ef       	ldi	r18, 0xFF	; 255
 2ac:	8d e3       	ldi	r24, 0x3D	; 61
 2ae:	99 e4       	ldi	r25, 0x49	; 73
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <initSequence+0x4e>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <initSequence+0x58>
 2ba:	00 00       	nop
	_delay_ms(3000);
	LCD_Clear();
 2bc:	12 df       	rcall	.-476    	; 0xe2 <LCD_Clear>
	LCD_WriteText("Pow: Bcl: Con:");
 2be:	8f e1       	ldi	r24, 0x1F	; 31
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	fe de       	rcall	.-516    	; 0xc0 <LCD_WriteText>
	LCD_GoTo(0,1);
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	06 df       	rcall	.-500    	; 0xd6 <LCD_GoTo>
	lcdInt(mem.powerup);
 2ca:	88 81       	ld	r24, Y
 2cc:	99 81       	ldd	r25, Y+1	; 0x01
 2ce:	8f df       	rcall	.-226    	; 0x1ee <lcdInt>
	LCD_GoTo(5,1);
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	85 e0       	ldi	r24, 0x05	; 5
 2d4:	00 df       	rcall	.-512    	; 0xd6 <LCD_GoTo>
	lcdInt(mem.backlight);
 2d6:	8c 81       	ldd	r24, Y+4	; 0x04
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	89 df       	rcall	.-238    	; 0x1ee <lcdInt>
	LCD_GoTo(10,1);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	8a e0       	ldi	r24, 0x0A	; 10
 2e0:	fa de       	rcall	.-524    	; 0xd6 <LCD_GoTo>
	lcdInt(mem.contrast);
 2e2:	8d 81       	ldd	r24, Y+5	; 0x05
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	83 df       	rcall	.-250    	; 0x1ee <lcdInt>
 2e8:	2f ef       	ldi	r18, 0xFF	; 255
 2ea:	8d e3       	ldi	r24, 0x3D	; 61
 2ec:	99 e4       	ldi	r25, 0x49	; 73
 2ee:	21 50       	subi	r18, 0x01	; 1
 2f0:	80 40       	sbci	r24, 0x00	; 0
 2f2:	90 40       	sbci	r25, 0x00	; 0
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <initSequence+0x8c>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <initSequence+0x96>
 2f8:	00 00       	nop
	_delay_ms(3000);
	LCD_Clear();	
}
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
	LCD_GoTo(5,1);
	lcdInt(mem.backlight);
	LCD_GoTo(10,1);
	lcdInt(mem.contrast);
	_delay_ms(3000);
	LCD_Clear();	
 2fe:	f1 ce       	rjmp	.-542    	; 0xe2 <LCD_Clear>

00000300 <spiByte>:
}

uint8_t spiByte(uint8_t data)
{
	// Start transmission (MOSI)
	SPDR = data;
 300:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
 302:	0d b4       	in	r0, 0x2d	; 45
 304:	07 fe       	sbrs	r0, 7
 306:	fd cf       	rjmp	.-6      	; 0x302 <spiByte+0x2>
	// Get return Value;
	return SPDR;
 308:	8e b5       	in	r24, 0x2e	; 46
}
 30a:	08 95       	ret

0000030c <max6675Read>:

uint16_t max6675Read(void)
{
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
	uint16_t max6675Data;
	PORTB &= ~_BV(PB2); //CS LOW
 310:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 312:	22 e0       	ldi	r18, 0x02	; 2
 314:	2a 95       	dec	r18
 316:	f1 f7       	brne	.-4      	; 0x314 <max6675Read+0x8>
 318:	00 c0       	rjmp	.+0      	; 0x31a <max6675Read+0xe>
	_delay_us(1);
	max6675Data = (spiByte(0) << 8);
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	f1 df       	rcall	.-30     	; 0x300 <spiByte>
 31e:	c8 2f       	mov	r28, r24
 320:	d0 e0       	ldi	r29, 0x00	; 0
 322:	dc 2f       	mov	r29, r28
 324:	cc 27       	eor	r28, r28
	max6675Data |= (spiByte(0) & 0xFF);
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	eb df       	rcall	.-42     	; 0x300 <spiByte>
 32a:	32 e0       	ldi	r19, 0x02	; 2
 32c:	3a 95       	dec	r19
 32e:	f1 f7       	brne	.-4      	; 0x32c <max6675Read+0x20>
 330:	00 c0       	rjmp	.+0      	; 0x332 <max6675Read+0x26>
	_delay_us(1);
	PORTB |= _BV(PB2); //CS HIGH
 332:	2a 9a       	sbi	0x05, 2	; 5
	return max6675Data;
}
 334:	9e 01       	movw	r18, r28
 336:	28 2b       	or	r18, r24
 338:	c9 01       	movw	r24, r18
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <LCD_WriteTemperature>:
{
	return (((max6675Data >> 3) & 0xFFF)/4);
}

void LCD_WriteTemperature(uint16_t max6675Data)
{
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
	if(max6675Data & _BV(2))
 344:	82 ff       	sbrs	r24, 2
 346:	05 c0       	rjmp	.+10     	; 0x352 <LCD_WriteTemperature+0x12>
	{
		LCD_WriteText("NO PROBE ");
 348:	8e e2       	ldi	r24, 0x2E	; 46
 34a:	91 e0       	ldi	r25, 0x01	; 1
		LCD_WriteData('.');
		lcdInt( ((max6675Data >> 3) & 0x3)*25 );
		LCD_WriteData(223);
		LCD_WriteData('C');
	}
}
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28

void LCD_WriteTemperature(uint16_t max6675Data)
{
	if(max6675Data & _BV(2))
	{
		LCD_WriteText("NO PROBE ");
 350:	b7 ce       	rjmp	.-658    	; 0xc0 <LCD_WriteText>
	}
	else
	{	
		lcdInt((((max6675Data >> 3) & 0xFFF)/4));
 352:	ec 01       	movw	r28, r24
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	d6 95       	lsr	r29
 358:	c7 95       	ror	r28
 35a:	8a 95       	dec	r24
 35c:	e1 f7       	brne	.-8      	; 0x356 <LCD_WriteTemperature+0x16>
 35e:	ce 01       	movw	r24, r28
 360:	9f 70       	andi	r25, 0x0F	; 15
 362:	96 95       	lsr	r25
 364:	87 95       	ror	r24
 366:	96 95       	lsr	r25
 368:	87 95       	ror	r24
 36a:	41 df       	rcall	.-382    	; 0x1ee <lcdInt>
		LCD_WriteData('.');
 36c:	8e e2       	ldi	r24, 0x2E	; 46
 36e:	a6 de       	rcall	.-692    	; 0xbc <LCD_WriteData>
		lcdInt( ((max6675Data >> 3) & 0x3)*25 );
 370:	c3 70       	andi	r28, 0x03	; 3
 372:	dd 27       	eor	r29, r29
 374:	89 e1       	ldi	r24, 0x19	; 25
 376:	28 2f       	mov	r18, r24
 378:	2c 9f       	mul	r18, r28
 37a:	c0 01       	movw	r24, r0
 37c:	2d 9f       	mul	r18, r29
 37e:	90 0d       	add	r25, r0
 380:	11 24       	eor	r1, r1
 382:	35 df       	rcall	.-406    	; 0x1ee <lcdInt>
		LCD_WriteData(223);
 384:	8f ed       	ldi	r24, 0xDF	; 223
 386:	9a de       	rcall	.-716    	; 0xbc <LCD_WriteData>
		LCD_WriteData('C');
 388:	83 e4       	ldi	r24, 0x43	; 67
	}
}
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
	{	
		lcdInt((((max6675Data >> 3) & 0xFFF)/4));
		LCD_WriteData('.');
		lcdInt( ((max6675Data >> 3) & 0x3)*25 );
		LCD_WriteData(223);
		LCD_WriteData('C');
 38e:	96 ce       	rjmp	.-724    	; 0xbc <LCD_WriteData>

00000390 <main>:
volatile uint8_t state=0;
volatile uint16_t max6675Data;

int main(void)
{
	initSequence();
 390:	68 df       	rcall	.-304    	; 0x262 <initSequence>
	
	LCD_Clear();
 392:	a7 de       	rcall	.-690    	; 0xe2 <LCD_Clear>
	sei();
 394:	78 94       	sei
    while(1)
    {
		if (max6675GetTemperature(max6675Read()) > 30)
 396:	ba df       	rcall	.-140    	; 0x30c <max6675Read>
}

//Return temperature in Celcius 
uint16_t max6675GetTemperature(uint16_t max6675Data)
{
	return (((max6675Data >> 3) & 0xFFF)/4);
 398:	23 e0       	ldi	r18, 0x03	; 3
 39a:	96 95       	lsr	r25
 39c:	87 95       	ror	r24
 39e:	2a 95       	dec	r18
 3a0:	e1 f7       	brne	.-8      	; 0x39a <main+0xa>
 3a2:	9f 70       	andi	r25, 0x0F	; 15
	
	LCD_Clear();
	sei();
    while(1)
    {
		if (max6675GetTemperature(max6675Read()) > 30)
 3a4:	8c 37       	cpi	r24, 0x7C	; 124
 3a6:	91 05       	cpc	r25, r1
 3a8:	10 f0       	brcs	.+4      	; 0x3ae <main+0x1e>
	PORTD |= _BV(PD0);
}

inline void heaterOff(void)
{
	PORTD &= ~_BV(PD0);
 3aa:	58 98       	cbi	0x0b, 0	; 11
 3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <main+0x20>
	}
}

inline void heaterOn(void)
{
	PORTD |= _BV(PD0);
 3ae:	58 9a       	sbi	0x0b, 0	; 11
		}
		else
		{
			heaterOn();
		}
		LCD_GoTo(0,0);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 de       	rcall	.-736    	; 0xd6 <LCD_GoTo>
		LCD_WriteTemperature(max6675Read());
 3b6:	aa df       	rcall	.-172    	; 0x30c <max6675Read>
 3b8:	c3 df       	rcall	.-122    	; 0x340 <LCD_WriteTemperature>
		LCD_GoTo(0,1);
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	8b de       	rcall	.-746    	; 0xd6 <LCD_GoTo>
		lcdInt(readADCTemp());
 3c0:	3e df       	rcall	.-388    	; 0x23e <readADCTemp>
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	14 df       	rcall	.-472    	; 0x1ee <lcdInt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c6:	2f ef       	ldi	r18, 0xFF	; 255
 3c8:	81 ee       	ldi	r24, 0xE1	; 225
 3ca:	94 e0       	ldi	r25, 0x04	; 4
 3cc:	21 50       	subi	r18, 0x01	; 1
 3ce:	80 40       	sbci	r24, 0x00	; 0
 3d0:	90 40       	sbci	r25, 0x00	; 0
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <main+0x3c>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <main+0x46>
 3d6:	00 00       	nop
 3d8:	de cf       	rjmp	.-68     	; 0x396 <main+0x6>

000003da <__vector_1>:
}

// INTERRUPTS

ISR(INT0_vect)
{
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	2f 93       	push	r18
 3e6:	3f 93       	push	r19
 3e8:	4f 93       	push	r20
 3ea:	5f 93       	push	r21
 3ec:	6f 93       	push	r22
 3ee:	7f 93       	push	r23
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	af 93       	push	r26
 3f6:	bf 93       	push	r27
 3f8:	ef 93       	push	r30
 3fa:	ff 93       	push	r31
	state = (state+1) % 2;
 3fc:	80 91 38 01 	lds	r24, 0x0138
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	81 70       	andi	r24, 0x01	; 1
 406:	99 27       	eor	r25, r25
 408:	80 93 38 01 	sts	0x0138, r24
	if (state)
 40c:	80 91 38 01 	lds	r24, 0x0138
 410:	88 23       	and	r24, r24
 412:	71 f0       	breq	.+28     	; 0x430 <__vector_1+0x56>
	{
		encoderPosition = mem.backlight;
 414:	80 91 40 01 	lds	r24, 0x0140
 418:	80 93 39 01 	sts	0x0139, r24
		LCD_GoTo(0,1);
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	5a de       	rcall	.-844    	; 0xd6 <LCD_GoTo>
		LCD_WriteData(126);
 422:	8e e7       	ldi	r24, 0x7E	; 126
 424:	4b de       	rcall	.-874    	; 0xbc <LCD_WriteData>
		LCD_GoTo(5,1);
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	85 e0       	ldi	r24, 0x05	; 5
 42a:	55 de       	rcall	.-854    	; 0xd6 <LCD_GoTo>
		LCD_WriteData(32);
 42c:	80 e2       	ldi	r24, 0x20	; 32
 42e:	0d c0       	rjmp	.+26     	; 0x44a <__vector_1+0x70>
	} 
	else
	{
		encoderPosition = mem.contrast;
 430:	80 91 41 01 	lds	r24, 0x0141
 434:	80 93 39 01 	sts	0x0139, r24
		LCD_GoTo(0,1);
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	4c de       	rcall	.-872    	; 0xd6 <LCD_GoTo>
		LCD_WriteData(32);
 43e:	80 e2       	ldi	r24, 0x20	; 32
 440:	3d de       	rcall	.-902    	; 0xbc <LCD_WriteData>
		LCD_GoTo(5,1);
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	85 e0       	ldi	r24, 0x05	; 5
 446:	47 de       	rcall	.-882    	; 0xd6 <LCD_GoTo>
		LCD_WriteData(126);
 448:	8e e7       	ldi	r24, 0x7E	; 126
 44a:	38 de       	rcall	.-912    	; 0xbc <LCD_WriteData>
	}
	eepromSave();
 44c:	8a de       	rcall	.-748    	; 0x162 <eepromSave>
}
 44e:	ff 91       	pop	r31
 450:	ef 91       	pop	r30
 452:	bf 91       	pop	r27
 454:	af 91       	pop	r26
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	7f 91       	pop	r23
 45c:	6f 91       	pop	r22
 45e:	5f 91       	pop	r21
 460:	4f 91       	pop	r20
 462:	3f 91       	pop	r19
 464:	2f 91       	pop	r18
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0
 46c:	1f 90       	pop	r1
 46e:	18 95       	reti

00000470 <__vector_2>:

ISR(INT1_vect)
{
 470:	1f 92       	push	r1
 472:	0f 92       	push	r0
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	2f 93       	push	r18
 47c:	3f 93       	push	r19
 47e:	4f 93       	push	r20
 480:	5f 93       	push	r21
 482:	6f 93       	push	r22
 484:	7f 93       	push	r23
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	af 93       	push	r26
 48c:	bf 93       	push	r27
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
	if (PIND & _BV(PD4))
 492:	4c 9b       	sbis	0x09, 4	; 9
 494:	08 c0       	rjmp	.+16     	; 0x4a6 <__vector_2+0x36>
	{
		if (encoderPosition>0)
 496:	80 91 39 01 	lds	r24, 0x0139
 49a:	88 23       	and	r24, r24
 49c:	69 f0       	breq	.+26     	; 0x4b8 <__vector_2+0x48>
		encoderPosition--;
 49e:	80 91 39 01 	lds	r24, 0x0139
 4a2:	81 50       	subi	r24, 0x01	; 1
 4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <__vector_2+0x44>
	}
	else
	{
		if (encoderPosition<255)
 4a6:	80 91 39 01 	lds	r24, 0x0139
 4aa:	8f 3f       	cpi	r24, 0xFF	; 255
 4ac:	29 f0       	breq	.+10     	; 0x4b8 <__vector_2+0x48>
		encoderPosition++;
 4ae:	80 91 39 01 	lds	r24, 0x0139
 4b2:	8f 5f       	subi	r24, 0xFF	; 255
 4b4:	80 93 39 01 	sts	0x0139, r24
	}
	//
	if(state)
 4b8:	80 91 38 01 	lds	r24, 0x0138
 4bc:	88 23       	and	r24, r24
 4be:	21 f0       	breq	.+8      	; 0x4c8 <__vector_2+0x58>
	{
		setBacklight(encoderPosition);
 4c0:	80 91 39 01 	lds	r24, 0x0139
 4c4:	8a de       	rcall	.-748    	; 0x1da <setBacklight>
 4c6:	05 c0       	rjmp	.+10     	; 0x4d2 <__vector_2+0x62>
	}
	else
	{
		setContrast(encoderPosition);
 4c8:	80 91 39 01 	lds	r24, 0x0139
	OCR0B = brightnes;
	mem.backlight = brightnes;
}
void setContrast(uint8_t contrast)
{
	OCR0A = contrast;
 4cc:	87 bd       	out	0x27, r24	; 39
	mem.contrast = contrast;
 4ce:	80 93 41 01 	sts	0x0141, r24
		setContrast(encoderPosition);
		
		
	}
	
}
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	bf 91       	pop	r27
 4d8:	af 91       	pop	r26
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	7f 91       	pop	r23
 4e0:	6f 91       	pop	r22
 4e2:	5f 91       	pop	r21
 4e4:	4f 91       	pop	r20
 4e6:	3f 91       	pop	r19
 4e8:	2f 91       	pop	r18
 4ea:	0f 90       	pop	r0
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	0f 90       	pop	r0
 4f0:	1f 90       	pop	r1
 4f2:	18 95       	reti

000004f4 <__udivmodhi4>:
 4f4:	aa 1b       	sub	r26, r26
 4f6:	bb 1b       	sub	r27, r27
 4f8:	51 e1       	ldi	r21, 0x11	; 17
 4fa:	07 c0       	rjmp	.+14     	; 0x50a <__udivmodhi4_ep>

000004fc <__udivmodhi4_loop>:
 4fc:	aa 1f       	adc	r26, r26
 4fe:	bb 1f       	adc	r27, r27
 500:	a6 17       	cp	r26, r22
 502:	b7 07       	cpc	r27, r23
 504:	10 f0       	brcs	.+4      	; 0x50a <__udivmodhi4_ep>
 506:	a6 1b       	sub	r26, r22
 508:	b7 0b       	sbc	r27, r23

0000050a <__udivmodhi4_ep>:
 50a:	88 1f       	adc	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	5a 95       	dec	r21
 510:	a9 f7       	brne	.-22     	; 0x4fc <__udivmodhi4_loop>
 512:	80 95       	com	r24
 514:	90 95       	com	r25
 516:	bc 01       	movw	r22, r24
 518:	cd 01       	movw	r24, r26
 51a:	08 95       	ret

0000051c <__itoa_ncheck>:
 51c:	bb 27       	eor	r27, r27
 51e:	4a 30       	cpi	r20, 0x0A	; 10
 520:	31 f4       	brne	.+12     	; 0x52e <__itoa_ncheck+0x12>
 522:	99 23       	and	r25, r25
 524:	22 f4       	brpl	.+8      	; 0x52e <__itoa_ncheck+0x12>
 526:	bd e2       	ldi	r27, 0x2D	; 45
 528:	90 95       	com	r25
 52a:	81 95       	neg	r24
 52c:	9f 4f       	sbci	r25, 0xFF	; 255
 52e:	01 c0       	rjmp	.+2      	; 0x532 <__utoa_common>

00000530 <__utoa_ncheck>:
 530:	bb 27       	eor	r27, r27

00000532 <__utoa_common>:
 532:	fb 01       	movw	r30, r22
 534:	55 27       	eor	r21, r21
 536:	aa 27       	eor	r26, r26
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	aa 1f       	adc	r26, r26
 53e:	a4 17       	cp	r26, r20
 540:	10 f0       	brcs	.+4      	; 0x546 <__utoa_common+0x14>
 542:	a4 1b       	sub	r26, r20
 544:	83 95       	inc	r24
 546:	50 51       	subi	r21, 0x10	; 16
 548:	b9 f7       	brne	.-18     	; 0x538 <__utoa_common+0x6>
 54a:	a0 5d       	subi	r26, 0xD0	; 208
 54c:	aa 33       	cpi	r26, 0x3A	; 58
 54e:	08 f0       	brcs	.+2      	; 0x552 <__utoa_common+0x20>
 550:	a9 5d       	subi	r26, 0xD9	; 217
 552:	a1 93       	st	Z+, r26
 554:	00 97       	sbiw	r24, 0x00	; 0
 556:	79 f7       	brne	.-34     	; 0x536 <__utoa_common+0x4>
 558:	b1 11       	cpse	r27, r1
 55a:	b1 93       	st	Z+, r27
 55c:	11 92       	st	Z+, r1
 55e:	cb 01       	movw	r24, r22
 560:	00 c0       	rjmp	.+0      	; 0x562 <strrev>

00000562 <strrev>:
 562:	dc 01       	movw	r26, r24
 564:	fc 01       	movw	r30, r24
 566:	67 2f       	mov	r22, r23
 568:	71 91       	ld	r23, Z+
 56a:	77 23       	and	r23, r23
 56c:	e1 f7       	brne	.-8      	; 0x566 <strrev+0x4>
 56e:	32 97       	sbiw	r30, 0x02	; 2
 570:	04 c0       	rjmp	.+8      	; 0x57a <strrev+0x18>
 572:	7c 91       	ld	r23, X
 574:	6d 93       	st	X+, r22
 576:	70 83       	st	Z, r23
 578:	62 91       	ld	r22, -Z
 57a:	ae 17       	cp	r26, r30
 57c:	bf 07       	cpc	r27, r31
 57e:	c8 f3       	brcs	.-14     	; 0x572 <strrev+0x10>
 580:	08 95       	ret

00000582 <eeprom_read_block>:
 582:	dc 01       	movw	r26, r24
 584:	cb 01       	movw	r24, r22

00000586 <eeprom_read_blraw>:
 586:	fc 01       	movw	r30, r24
 588:	f9 99       	sbic	0x1f, 1	; 31
 58a:	fe cf       	rjmp	.-4      	; 0x588 <eeprom_read_blraw+0x2>
 58c:	06 c0       	rjmp	.+12     	; 0x59a <eeprom_read_blraw+0x14>
 58e:	f2 bd       	out	0x22, r31	; 34
 590:	e1 bd       	out	0x21, r30	; 33
 592:	f8 9a       	sbi	0x1f, 0	; 31
 594:	31 96       	adiw	r30, 0x01	; 1
 596:	00 b4       	in	r0, 0x20	; 32
 598:	0d 92       	st	X+, r0
 59a:	41 50       	subi	r20, 0x01	; 1
 59c:	50 40       	sbci	r21, 0x00	; 0
 59e:	b8 f7       	brcc	.-18     	; 0x58e <eeprom_read_blraw+0x8>
 5a0:	08 95       	ret

000005a2 <eeprom_update_block>:
 5a2:	dc 01       	movw	r26, r24
 5a4:	a4 0f       	add	r26, r20
 5a6:	b5 1f       	adc	r27, r21
 5a8:	41 50       	subi	r20, 0x01	; 1
 5aa:	50 40       	sbci	r21, 0x00	; 0
 5ac:	40 f0       	brcs	.+16     	; 0x5be <eeprom_update_block+0x1c>
 5ae:	cb 01       	movw	r24, r22
 5b0:	84 0f       	add	r24, r20
 5b2:	95 1f       	adc	r25, r21
 5b4:	2e 91       	ld	r18, -X
 5b6:	05 d0       	rcall	.+10     	; 0x5c2 <eeprom_update_r18>
 5b8:	41 50       	subi	r20, 0x01	; 1
 5ba:	50 40       	sbci	r21, 0x00	; 0
 5bc:	d8 f7       	brcc	.-10     	; 0x5b4 <eeprom_update_block+0x12>
 5be:	08 95       	ret

000005c0 <eeprom_update_byte>:
 5c0:	26 2f       	mov	r18, r22

000005c2 <eeprom_update_r18>:
 5c2:	f9 99       	sbic	0x1f, 1	; 31
 5c4:	fe cf       	rjmp	.-4      	; 0x5c2 <eeprom_update_r18>
 5c6:	92 bd       	out	0x22, r25	; 34
 5c8:	81 bd       	out	0x21, r24	; 33
 5ca:	f8 9a       	sbi	0x1f, 0	; 31
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	00 b4       	in	r0, 0x20	; 32
 5d0:	02 16       	cp	r0, r18
 5d2:	39 f0       	breq	.+14     	; 0x5e2 <eeprom_update_r18+0x20>
 5d4:	1f ba       	out	0x1f, r1	; 31
 5d6:	20 bd       	out	0x20, r18	; 32
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	f8 94       	cli
 5dc:	fa 9a       	sbi	0x1f, 2	; 31
 5de:	f9 9a       	sbi	0x1f, 1	; 31
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	08 95       	ret

000005e4 <_exit>:
 5e4:	f8 94       	cli

000005e6 <__stop_program>:
 5e6:	ff cf       	rjmp	.-2      	; 0x5e6 <__stop_program>
