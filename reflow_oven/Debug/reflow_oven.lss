
reflow_oven.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000006a0  00000754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080013a  0080013a  0000078e  2**0
                  ALLOC
  3 .eeprom       00000009  00810000  00810000  0000078e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000797  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007c8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000138  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001392  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005f0  00000000  00000000  00001cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000066a  00000000  00000000  000022c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000350  00000000  00000000  0000292c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000043e  00000000  00000000  00002c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bc7  00000000  00000000  000030ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000130  00000000  00000000  00003c81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	39 c2       	rjmp	.+1138   	; 0x476 <__vector_1>
   4:	86 c2       	rjmp	.+1292   	; 0x512 <__vector_2>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e0 ea       	ldi	r30, 0xA0	; 160
  48:	f6 e0       	ldi	r31, 0x06	; 6
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	aa 33       	cpi	r26, 0x3A	; 58
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	aa e3       	ldi	r26, 0x3A	; 58
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a7 34       	cpi	r26, 0x47	; 71
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	ce d1       	rcall	.+924    	; 0x404 <main>
  68:	19 c3       	rjmp	.+1586   	; 0x69c <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <_LCD_OutNibble>:
// Funkcja wystawiaj¹ca pó³bajt na magistralê danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
  6c:	80 ff       	sbrs	r24, 0
  6e:	02 c0       	rjmp	.+4      	; 0x74 <_LCD_OutNibble+0x8>
	LCD_DB4_PORT |= LCD_DB4;
  70:	43 9a       	sbi	0x08, 3	; 8
  72:	01 c0       	rjmp	.+2      	; 0x76 <_LCD_OutNibble+0xa>
else
	LCD_DB4_PORT  &= ~LCD_DB4;
  74:	43 98       	cbi	0x08, 3	; 8

if(nibbleToWrite & 0x02)
  76:	81 ff       	sbrs	r24, 1
  78:	02 c0       	rjmp	.+4      	; 0x7e <_LCD_OutNibble+0x12>
	LCD_DB5_PORT |= LCD_DB5;
  7a:	42 9a       	sbi	0x08, 2	; 8
  7c:	01 c0       	rjmp	.+2      	; 0x80 <_LCD_OutNibble+0x14>
else
	LCD_DB5_PORT  &= ~LCD_DB5;
  7e:	42 98       	cbi	0x08, 2	; 8

if(nibbleToWrite & 0x04)
  80:	82 ff       	sbrs	r24, 2
  82:	02 c0       	rjmp	.+4      	; 0x88 <_LCD_OutNibble+0x1c>
	LCD_DB6_PORT |= LCD_DB6;
  84:	41 9a       	sbi	0x08, 1	; 8
  86:	01 c0       	rjmp	.+2      	; 0x8a <_LCD_OutNibble+0x1e>
else
	LCD_DB6_PORT  &= ~LCD_DB6;
  88:	41 98       	cbi	0x08, 1	; 8

if(nibbleToWrite & 0x08)
  8a:	83 ff       	sbrs	r24, 3
  8c:	02 c0       	rjmp	.+4      	; 0x92 <_LCD_OutNibble+0x26>
	LCD_DB7_PORT |= LCD_DB7;
  8e:	40 9a       	sbi	0x08, 0	; 8
  90:	08 95       	ret
else
	LCD_DB7_PORT  &= ~LCD_DB7;
  92:	40 98       	cbi	0x08, 0	; 8
  94:	08 95       	ret

00000096 <_LCD_Write>:
//
// Funkcja zapisu bajtu do wyœwietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
  96:	cf 93       	push	r28
  98:	c8 2f       	mov	r28, r24
LCD_E_PORT |= LCD_E;
  9a:	28 9a       	sbi	0x05, 0	; 5
_LCD_OutNibble(dataToWrite >> 4);
  9c:	82 95       	swap	r24
  9e:	8f 70       	andi	r24, 0x0F	; 15
  a0:	e5 df       	rcall	.-54     	; 0x6c <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
  a2:	28 98       	cbi	0x05, 0	; 5
LCD_E_PORT |= LCD_E;
  a4:	28 9a       	sbi	0x05, 0	; 5
_LCD_OutNibble(dataToWrite);
  a6:	8c 2f       	mov	r24, r28
  a8:	e1 df       	rcall	.-62     	; 0x6c <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
  aa:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	85 e8       	ldi	r24, 0x85	; 133
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <_LCD_Write+0x18>
  b2:	00 00       	nop
_delay_us(50);
}
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <LCD_WriteCommand>:
// Funkcja zapisu rozkazu do wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
  b8:	5f 98       	cbi	0x0b, 7	; 11
_LCD_Write(commandToWrite);
  ba:	ed cf       	rjmp	.-38     	; 0x96 <_LCD_Write>

000000bc <LCD_WriteData>:
// Funkcja zapisu danych do pamiêci wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
  bc:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_Write(dataToWrite);
  be:	eb cf       	rjmp	.-42     	; 0x96 <_LCD_Write>

000000c0 <LCD_WriteText>:
//
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	ec 01       	movw	r28, r24
while(*text)
  c6:	89 91       	ld	r24, Y+
  c8:	88 23       	and	r24, r24
  ca:	11 f0       	breq	.+4      	; 0xd0 <LCD_WriteText+0x10>
  LCD_WriteData(*text++);
  cc:	f7 df       	rcall	.-18     	; 0xbc <LCD_WriteData>
  ce:	fb cf       	rjmp	.-10     	; 0xc6 <LCD_WriteText+0x6>
}
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <LCD_GoTo>:
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
  d6:	90 e4       	ldi	r25, 0x40	; 64
  d8:	69 9f       	mul	r22, r25
  da:	80 0d       	add	r24, r0
  dc:	11 24       	eor	r1, r1
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	eb cf       	rjmp	.-42     	; 0xb8 <LCD_WriteCommand>

000000e2 <LCD_Clear>:
// Funkcja czyszczenia ekranu wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Clear(void)
{
LCD_WriteCommand(HD44780_CLEAR);
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	e9 df       	rcall	.-46     	; 0xb8 <LCD_WriteCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	8f e9       	ldi	r24, 0x9F	; 159
  e8:	9f e0       	ldi	r25, 0x0F	; 15
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_Clear+0x8>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_Clear+0xe>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <LCD_Init>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Init(void)
{
  f4:	cf 93       	push	r28
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
  f6:	3b 9a       	sbi	0x07, 3	; 7
LCD_DB5_DIR |= LCD_DB5; //
  f8:	3a 9a       	sbi	0x07, 2	; 7
LCD_DB6_DIR |= LCD_DB6; //
  fa:	39 9a       	sbi	0x07, 1	; 7
LCD_DB7_DIR |= LCD_DB7; //
  fc:	38 9a       	sbi	0x07, 0	; 7
LCD_E_DIR 	|= LCD_E;   //
  fe:	20 9a       	sbi	0x04, 0	; 4
LCD_RS_DIR 	|= LCD_RS;  //
 100:	57 9a       	sbi	0x0a, 7	; 10
 102:	8f e2       	ldi	r24, 0x2F	; 47
 104:	95 e7       	ldi	r25, 0x75	; 117
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_Init+0x12>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_Init+0x18>
 10c:	00 00       	nop
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 10e:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 110:	28 98       	cbi	0x05, 0	; 5
 112:	c3 e0       	ldi	r28, 0x03	; 3

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
  {
  LCD_E_PORT |= LCD_E; //  E = 1
 114:	28 9a       	sbi	0x05, 0	; 5
  _LCD_OutNibble(0x03); // tryb 8-bitowy
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	a9 df       	rcall	.-174    	; 0x6c <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
 11a:	28 98       	cbi	0x05, 0	; 5
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	97 e2       	ldi	r25, 0x27	; 39
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_Init+0x2c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_Init+0x32>
 126:	00 00       	nop
 128:	c1 50       	subi	r28, 0x01	; 1
LCD_RS_DIR 	|= LCD_RS;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 12a:	a1 f7       	brne	.-24     	; 0x114 <LCD_Init+0x20>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
 12c:	28 9a       	sbi	0x05, 0	; 5
_LCD_OutNibble(0x02); // tryb 4-bitowy
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	9d df       	rcall	.-198    	; 0x6c <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
 132:	28 98       	cbi	0x05, 0	; 5
 134:	8f ec       	ldi	r24, 0xCF	; 207
 136:	97 e0       	ldi	r25, 0x07	; 7
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_Init+0x44>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_Init+0x4a>
 13e:	00 00       	nop

_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 140:	88 e2       	ldi	r24, 0x28	; 40
 142:	ba df       	rcall	.-140    	; 0xb8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 144:	88 e0       	ldi	r24, 0x08	; 8
 146:	b8 df       	rcall	.-144    	; 0xb8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	b6 df       	rcall	.-148    	; 0xb8 <LCD_WriteCommand>
 14c:	8f e9       	ldi	r24, 0x9F	; 159
 14e:	9f e0       	ldi	r25, 0x0F	; 15
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_Init+0x5c>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_Init+0x62>
 156:	00 00       	nop
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	ae df       	rcall	.-164    	; 0xb8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 15c:	8c e0       	ldi	r24, 0x0C	; 12
}
 15e:	cf 91       	pop	r28
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 160:	ab cf       	rjmp	.-170    	; 0xb8 <LCD_WriteCommand>

00000162 <eepromSave>:
	encoderPosition = mem.setTemperature;
}

void eepromSave(void)
{
	eeprom_update_block(&mem,&eemem,sizeof(eemem_t));
 162:	49 e0       	ldi	r20, 0x09	; 9
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	8d e3       	ldi	r24, 0x3D	; 61
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	75 c2       	rjmp	.+1258   	; 0x65a <eeprom_update_block>

00000170 <eepromInit>:
	_delay_ms(3000);
	LCD_Clear();	
}

void eepromInit(void)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
	eeprom_read_block(&mem, &eemem, sizeof(eemem_t));
 174:	49 e0       	ldi	r20, 0x09	; 9
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	8d e3       	ldi	r24, 0x3D	; 61
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	5c d2       	rcall	.+1208   	; 0x63a <eeprom_read_block>
	mem.powerup++;
 182:	cd e3       	ldi	r28, 0x3D	; 61
 184:	d1 e0       	ldi	r29, 0x01	; 1
 186:	88 81       	ld	r24, Y
 188:	99 81       	ldd	r25, Y+1	; 0x01
 18a:	aa 81       	ldd	r26, Y+2	; 0x02
 18c:	bb 81       	ldd	r27, Y+3	; 0x03
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	a1 1d       	adc	r26, r1
 192:	b1 1d       	adc	r27, r1
 194:	88 83       	st	Y, r24
 196:	99 83       	std	Y+1, r25	; 0x01
 198:	aa 83       	std	Y+2, r26	; 0x02
 19a:	bb 83       	std	Y+3, r27	; 0x03
	eepromSave();
 19c:	e2 df       	rcall	.-60     	; 0x162 <eepromSave>
	encoderPosition = mem.setTemperature;
 19e:	88 85       	ldd	r24, Y+8	; 0x08
 1a0:	80 93 3a 01 	sts	0x013A, r24
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <ioInit>:
	eeprom_update_block(&mem,&eemem,sizeof(eemem_t));
}

void ioInit(void)
{
	DDRC = 0xFF;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	87 b9       	out	0x07, r24	; 7
	DDRD = _BV(PD0)|_BV(PD1)|_BV(PD5)|_BV(PD6)|_BV(PD7);
 1ae:	83 ee       	ldi	r24, 0xE3	; 227
 1b0:	8a b9       	out	0x0a, r24	; 10
	DDRB = _BV(PB0)|_BV(PB1)|_BV(PB2)|_BV(PB3)|_BV(PB5)|_BV(PB6)|_BV(PB7);
 1b2:	8f ee       	ldi	r24, 0xEF	; 239
 1b4:	84 b9       	out	0x04, r24	; 4
	
	PORTC = 0;
 1b6:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;
 1b8:	1b b8       	out	0x0b, r1	; 11
	PORTB = _BV(PB2);
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	85 b9       	out	0x05, r24	; 5
 1be:	08 95       	ret

000001c0 <timerInit>:
}

void timerInit(void)
{
	//Timer 0 Fast PWM for backlight & contrast
	TCCR0A = _BV(COM0A1)|_BV(COM0B1)|_BV(WGM01)|_BV(WGM00);
 1c0:	83 ea       	ldi	r24, 0xA3	; 163
 1c2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS00);
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0;
 1c8:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 1ca:	18 bc       	out	0x28, r1	; 40
	//Timer 1 for speaker OC1A
	//CTC, WGM12 = 1, may be eventually WGM13 = 1
	TCCR1A = _BV(COM1A0);
 1cc:	80 e4       	ldi	r24, 0x40	; 64
 1ce:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = TCCR1B_OFF;
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	80 93 81 00 	sts	0x0081, r24
	//set timer1 frequency = 2KHz
	OCR1A = 4000;
 1d8:	80 ea       	ldi	r24, 0xA0	; 160
 1da:	9f e0       	ldi	r25, 0x0F	; 15
 1dc:	90 93 89 00 	sts	0x0089, r25
 1e0:	80 93 88 00 	sts	0x0088, r24
 1e4:	08 95       	ret

000001e6 <pinInterruptsInit>:
}

void pinInterruptsInit(void)
{
	//INT0 on falling edge, INT1 on any edge
	EICRA = _BV(ISC11)|_BV(ISC01);
 1e6:	8a e0       	ldi	r24, 0x0A	; 10
 1e8:	80 93 69 00 	sts	0x0069, r24
	EIMSK = _BV(INT1)|_BV(INT0);
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	8d bb       	out	0x1d, r24	; 29
 1f0:	08 95       	ret

000001f2 <setBacklight>:
}

void setBacklight(uint8_t brightnes)
{
	if (brightnes)
 1f2:	88 23       	and	r24, r24
 1f4:	19 f0       	breq	.+6      	; 0x1fc <setBacklight+0xa>
	{
		TCCR0A = _BV(COM0A1)|_BV(COM0B1)|_BV(WGM01)|_BV(WGM00);
 1f6:	93 ea       	ldi	r25, 0xA3	; 163
 1f8:	94 bd       	out	0x24, r25	; 36
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <setBacklight+0xc>
	} 
	else
	{
		TCCR0A = 0;
 1fc:	14 bc       	out	0x24, r1	; 36
	}
	OCR0B = brightnes;
 1fe:	88 bd       	out	0x28, r24	; 40
	mem.backlight = brightnes;
 200:	80 93 41 01 	sts	0x0141, r24
 204:	08 95       	ret

00000206 <speakerBeep>:
	mem.contrast = contrast;
}

void speakerOn(void)
{
	TCCR1B = TCCR1B_ON;
 206:	29 e0       	ldi	r18, 0x09	; 9
 208:	20 93 81 00 	sts	0x0081, r18
}

void speakerBeep(uint16_t duration) //duration in ms
{
	speakerOn();
	while(duration--)
 20c:	00 97       	sbiw	r24, 0x00	; 0
 20e:	41 f0       	breq	.+16     	; 0x220 <speakerBeep+0x1a>
 210:	ef ec       	ldi	r30, 0xCF	; 207
 212:	f7 e0       	ldi	r31, 0x07	; 7
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <speakerBeep+0xe>
 218:	00 c0       	rjmp	.+0      	; 0x21a <speakerBeep+0x14>
 21a:	00 00       	nop
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f6 cf       	rjmp	.-20     	; 0x20c <speakerBeep+0x6>
	TCCR1B = TCCR1B_ON;
}

void speakerOff(void)
{
	TCCR1B = TCCR1B_OFF;
 220:	88 e0       	ldi	r24, 0x08	; 8
 222:	80 93 81 00 	sts	0x0081, r24
 226:	08 95       	ret

00000228 <lcd8t>:
		_delay_ms(1);
	speakerOff();
}

void lcd8t(uint8_t l)	//print on lcd decimal number up to 255
{
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
	uint8_t j,d,s;
	j = l%10;
	l /= 10;
 22c:	2a e0       	ldi	r18, 0x0A	; 10
 22e:	62 2f       	mov	r22, r18
 230:	b1 d1       	rcall	.+866    	; 0x594 <__udivmodqi4>
 232:	c9 2f       	mov	r28, r25
	d = l%10;
	l /= 10;
 234:	af d1       	rcall	.+862    	; 0x594 <__udivmodqi4>
 236:	d9 2f       	mov	r29, r25
	s = l%10;
 238:	ad d1       	rcall	.+858    	; 0x594 <__udivmodqi4>
	LCD_WriteData('0'+s);
 23a:	80 e3       	ldi	r24, 0x30	; 48
 23c:	89 0f       	add	r24, r25
 23e:	3e df       	rcall	.-388    	; 0xbc <LCD_WriteData>
	LCD_WriteData('0'+d);
 240:	80 e3       	ldi	r24, 0x30	; 48
 242:	8d 0f       	add	r24, r29
 244:	3b df       	rcall	.-394    	; 0xbc <LCD_WriteData>
	LCD_WriteData('0'+j);
 246:	80 e3       	ldi	r24, 0x30	; 48
 248:	8c 0f       	add	r24, r28
	
}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
	d = l%10;
	l /= 10;
	s = l%10;
	LCD_WriteData('0'+s);
	LCD_WriteData('0'+d);
	LCD_WriteData('0'+j);
 24e:	36 cf       	rjmp	.-404    	; 0xbc <LCD_WriteData>

00000250 <lcdInt>:
	LCD_WriteData('0'+j);
	
}

void lcdInt(uint16_t number)
{
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	00 d0       	rcall	.+0      	; 0x25a <lcdInt+0xa>
 25a:	00 d0       	rcall	.+0      	; 0x25c <lcdInt+0xc>
 25c:	00 d0       	rcall	.+0      	; 0x25e <lcdInt+0xe>
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	8c 01       	movw	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 264:	4a e0       	ldi	r20, 0x0A	; 10
 266:	be 01       	movw	r22, r28
 268:	6f 5f       	subi	r22, 0xFF	; 255
 26a:	7f 4f       	sbci	r23, 0xFF	; 255
 26c:	b3 d1       	rcall	.+870    	; 0x5d4 <__itoa_ncheck>
	char str[6];
	itoa(number,str,10);
	if (number < 10)
 26e:	0a 30       	cpi	r16, 0x0A	; 10
 270:	11 05       	cpc	r17, r1
 272:	10 f4       	brcc	.+4      	; 0x278 <lcdInt+0x28>
	{
		LCD_WriteData('0');
 274:	80 e3       	ldi	r24, 0x30	; 48
 276:	22 df       	rcall	.-444    	; 0xbc <LCD_WriteData>
	}
	LCD_WriteText(str);
 278:	ce 01       	movw	r24, r28
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	21 df       	rcall	.-446    	; 0xc0 <LCD_WriteText>
}
 27e:	26 96       	adiw	r28, 0x06	; 6
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <adcInit>:

void adcInit(void)
{
	//Internal 1.1 reference voltage, temperature sensor;
	ADMUX = _BV(REFS1)|_BV(REFS0)|_BV(MUX3);
 294:	88 ec       	ldi	r24, 0xC8	; 200
 296:	80 93 7c 00 	sts	0x007C, r24
	ADCSRB = 0;
 29a:	10 92 7b 00 	sts	0x007B, r1
	ADCSRA = _BV(ADEN)|_BV(ADSC)|_BV(ADATE)|_BV(ADPS2)|_BV(ADPS1);
 29e:	86 ee       	ldi	r24, 0xE6	; 230
 2a0:	80 93 7a 00 	sts	0x007A, r24
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));	
 2a4:	80 91 7a 00 	lds	r24, 0x007A
 2a8:	84 ff       	sbrs	r24, 4
 2aa:	fc cf       	rjmp	.-8      	; 0x2a4 <adcInit+0x10>
}
 2ac:	08 95       	ret

000002ae <readADCTemp>:

uint8_t readADCTemp(void)
{
	 return (uint8_t)(((uint16_t)ADC*(uint16_t)mem.t_alpha)/10)+mem.t_offset;
 2ae:	20 91 78 00 	lds	r18, 0x0078
 2b2:	30 91 79 00 	lds	r19, 0x0079
 2b6:	ed e3       	ldi	r30, 0x3D	; 61
 2b8:	f1 e0       	ldi	r31, 0x01	; 1
 2ba:	46 81       	ldd	r20, Z+6	; 0x06
 2bc:	42 9f       	mul	r20, r18
 2be:	c0 01       	movw	r24, r0
 2c0:	43 9f       	mul	r20, r19
 2c2:	90 0d       	add	r25, r0
 2c4:	11 24       	eor	r1, r1
 2c6:	6a e0       	ldi	r22, 0x0A	; 10
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	70 d1       	rcall	.+736    	; 0x5ac <__udivmodhi4>
 2cc:	87 81       	ldd	r24, Z+7	; 0x07
}
 2ce:	86 0f       	add	r24, r22
 2d0:	08 95       	ret

000002d2 <initSequence>:




void initSequence(void)
{
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	2f ef       	ldi	r18, 0xFF	; 255
 2d8:	89 e6       	ldi	r24, 0x69	; 105
 2da:	98 e1       	ldi	r25, 0x18	; 24
 2dc:	21 50       	subi	r18, 0x01	; 1
 2de:	80 40       	sbci	r24, 0x00	; 0
 2e0:	90 40       	sbci	r25, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <initSequence+0xa>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <initSequence+0x14>
 2e6:	00 00       	nop
	_delay_ms(1000);
	eepromInit();
 2e8:	43 df       	rcall	.-378    	; 0x170 <eepromInit>
	ioInit();
 2ea:	5f df       	rcall	.-322    	; 0x1aa <ioInit>
	timerInit();
 2ec:	69 df       	rcall	.-302    	; 0x1c0 <timerInit>
	adcInit();
 2ee:	d2 df       	rcall	.-92     	; 0x294 <adcInit>
	readADCTemp();
 2f0:	de df       	rcall	.-68     	; 0x2ae <readADCTemp>


void spiInit(void)
{
	//SPI mode 1; CPOL = 0; CPHA=1; clk/4
	SPCR = _BV(SPE)|_BV(MSTR)|_BV(CPHA);
 2f2:	84 e5       	ldi	r24, 0x54	; 84
 2f4:	8c bd       	out	0x2c, r24	; 44
	ioInit();
	timerInit();
	adcInit();
	readADCTemp();
	spiInit();
	setBacklight(mem.backlight);
 2f6:	cd e3       	ldi	r28, 0x3D	; 61
 2f8:	d1 e0       	ldi	r29, 0x01	; 1
 2fa:	8c 81       	ldd	r24, Y+4	; 0x04
 2fc:	7a df       	rcall	.-268    	; 0x1f2 <setBacklight>
	setContrast(mem.contrast);
 2fe:	8d 81       	ldd	r24, Y+5	; 0x05
	OCR0B = brightnes;
	mem.backlight = brightnes;
}
void setContrast(uint8_t contrast)
{
	OCR0A = contrast;
 300:	87 bd       	out	0x27, r24	; 39
	adcInit();
	readADCTemp();
	spiInit();
	setBacklight(mem.backlight);
	setContrast(mem.contrast);
	pinInterruptsInit();
 302:	71 df       	rcall	.-286    	; 0x1e6 <pinInterruptsInit>
	//uart_init();	//9600 bod, 1bit stop, parity: none;
	speakerBeep(200);
 304:	88 ec       	ldi	r24, 0xC8	; 200
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	7e df       	rcall	.-260    	; 0x206 <speakerBeep>
	LCD_Init();
 30a:	f4 de       	rcall	.-536    	; 0xf4 <LCD_Init>
	LCD_Clear();
 30c:	ea de       	rcall	.-556    	; 0xe2 <LCD_Clear>
	LCD_WriteText("  Reflow oven");
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	d6 de       	rcall	.-596    	; 0xc0 <LCD_WriteText>
	LCD_GoTo(0,1);
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	de de       	rcall	.-580    	; 0xd6 <LCD_GoTo>
	LCD_WriteText("E.VT0.PL 2015 v0");
 31a:	8f e0       	ldi	r24, 0x0F	; 15
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	d0 de       	rcall	.-608    	; 0xc0 <LCD_WriteText>
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	8d e3       	ldi	r24, 0x3D	; 61
 324:	99 e4       	ldi	r25, 0x49	; 73
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <initSequence+0x54>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <initSequence+0x5e>
 330:	00 00       	nop
	_delay_ms(3000);
	LCD_Clear();
 332:	d7 de       	rcall	.-594    	; 0xe2 <LCD_Clear>
	LCD_WriteText("Pow: Bcl: Con:");
 334:	80 e2       	ldi	r24, 0x20	; 32
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	c3 de       	rcall	.-634    	; 0xc0 <LCD_WriteText>
	LCD_GoTo(0,1);
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	cb de       	rcall	.-618    	; 0xd6 <LCD_GoTo>
	lcdInt(mem.powerup);
 340:	88 81       	ld	r24, Y
 342:	99 81       	ldd	r25, Y+1	; 0x01
 344:	85 df       	rcall	.-246    	; 0x250 <lcdInt>
	LCD_GoTo(5,1);
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	85 e0       	ldi	r24, 0x05	; 5
 34a:	c5 de       	rcall	.-630    	; 0xd6 <LCD_GoTo>
	lcdInt(mem.backlight);
 34c:	8c 81       	ldd	r24, Y+4	; 0x04
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	7f df       	rcall	.-258    	; 0x250 <lcdInt>
	LCD_GoTo(10,1);
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	8a e0       	ldi	r24, 0x0A	; 10
 356:	bf de       	rcall	.-642    	; 0xd6 <LCD_GoTo>
	lcdInt(mem.contrast);
 358:	8d 81       	ldd	r24, Y+5	; 0x05
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	79 df       	rcall	.-270    	; 0x250 <lcdInt>
 35e:	2f ef       	ldi	r18, 0xFF	; 255
 360:	8d e3       	ldi	r24, 0x3D	; 61
 362:	99 e4       	ldi	r25, 0x49	; 73
 364:	21 50       	subi	r18, 0x01	; 1
 366:	80 40       	sbci	r24, 0x00	; 0
 368:	90 40       	sbci	r25, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <initSequence+0x92>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <initSequence+0x9c>
 36e:	00 00       	nop
	_delay_ms(3000);
	LCD_Clear();	
}
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
	LCD_GoTo(5,1);
	lcdInt(mem.backlight);
	LCD_GoTo(10,1);
	lcdInt(mem.contrast);
	_delay_ms(3000);
	LCD_Clear();	
 374:	b6 ce       	rjmp	.-660    	; 0xe2 <LCD_Clear>

00000376 <spiByte>:
}

uint8_t spiByte(uint8_t data)
{
	// Start transmission (MOSI)
	SPDR = data;
 376:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
 378:	0d b4       	in	r0, 0x2d	; 45
 37a:	07 fe       	sbrs	r0, 7
 37c:	fd cf       	rjmp	.-6      	; 0x378 <spiByte+0x2>
	// Get return Value;
	return SPDR;
 37e:	8e b5       	in	r24, 0x2e	; 46
}
 380:	08 95       	ret

00000382 <max6675Read>:

uint16_t max6675Read(void)
{
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
	uint16_t max6675Data;
	PORTB &= ~_BV(PB2); //CS LOW
 386:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 388:	22 e0       	ldi	r18, 0x02	; 2
 38a:	2a 95       	dec	r18
 38c:	f1 f7       	brne	.-4      	; 0x38a <max6675Read+0x8>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <max6675Read+0xe>
	_delay_us(1);
	max6675Data = (spiByte(0) << 8);
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	f1 df       	rcall	.-30     	; 0x376 <spiByte>
 394:	c8 2f       	mov	r28, r24
 396:	d0 e0       	ldi	r29, 0x00	; 0
 398:	dc 2f       	mov	r29, r28
 39a:	cc 27       	eor	r28, r28
	max6675Data |= (spiByte(0) & 0xFF);
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	eb df       	rcall	.-42     	; 0x376 <spiByte>
 3a0:	32 e0       	ldi	r19, 0x02	; 2
 3a2:	3a 95       	dec	r19
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <max6675Read+0x20>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <max6675Read+0x26>
	_delay_us(1);
	PORTB |= _BV(PB2); //CS HIGH
 3a8:	2a 9a       	sbi	0x05, 2	; 5
	return max6675Data;
}
 3aa:	9e 01       	movw	r18, r28
 3ac:	28 2b       	or	r18, r24
 3ae:	c9 01       	movw	r24, r18
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <LCD_WriteTemperature>:
{
	return (((max6675Data >> 3) & 0xFFF)/4);
}

void LCD_WriteTemperature(uint16_t max6675Data)
{
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
	if(max6675Data & _BV(2))
 3ba:	82 ff       	sbrs	r24, 2
 3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <LCD_WriteTemperature+0x12>
	{
		LCD_WriteText("NO PROBE ");
 3be:	8f e2       	ldi	r24, 0x2F	; 47
 3c0:	91 e0       	ldi	r25, 0x01	; 1
		LCD_WriteData('.');
		lcdInt( ((max6675Data >> 3) & 0x3)*25 );
		LCD_WriteData(223);
		LCD_WriteData('C');
	}
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28

void LCD_WriteTemperature(uint16_t max6675Data)
{
	if(max6675Data & _BV(2))
	{
		LCD_WriteText("NO PROBE ");
 3c6:	7c ce       	rjmp	.-776    	; 0xc0 <LCD_WriteText>
	}
	else
	{	
		lcd8t((((max6675Data >> 3) & 0xFFF)/4));
 3c8:	ec 01       	movw	r28, r24
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	d6 95       	lsr	r29
 3ce:	c7 95       	ror	r28
 3d0:	8a 95       	dec	r24
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <LCD_WriteTemperature+0x16>
 3d4:	ce 01       	movw	r24, r28
 3d6:	96 95       	lsr	r25
 3d8:	87 95       	ror	r24
 3da:	96 95       	lsr	r25
 3dc:	87 95       	ror	r24
 3de:	24 df       	rcall	.-440    	; 0x228 <lcd8t>
		LCD_WriteData('.');
 3e0:	8e e2       	ldi	r24, 0x2E	; 46
 3e2:	6c de       	rcall	.-808    	; 0xbc <LCD_WriteData>
		lcdInt( ((max6675Data >> 3) & 0x3)*25 );
 3e4:	c3 70       	andi	r28, 0x03	; 3
 3e6:	dd 27       	eor	r29, r29
 3e8:	89 e1       	ldi	r24, 0x19	; 25
 3ea:	28 2f       	mov	r18, r24
 3ec:	2c 9f       	mul	r18, r28
 3ee:	c0 01       	movw	r24, r0
 3f0:	2d 9f       	mul	r18, r29
 3f2:	90 0d       	add	r25, r0
 3f4:	11 24       	eor	r1, r1
 3f6:	2c df       	rcall	.-424    	; 0x250 <lcdInt>
		LCD_WriteData(223);
 3f8:	8f ed       	ldi	r24, 0xDF	; 223
 3fa:	60 de       	rcall	.-832    	; 0xbc <LCD_WriteData>
		LCD_WriteData('C');
 3fc:	83 e4       	ldi	r24, 0x43	; 67
	}
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
	{	
		lcd8t((((max6675Data >> 3) & 0xFFF)/4));
		LCD_WriteData('.');
		lcdInt( ((max6675Data >> 3) & 0x3)*25 );
		LCD_WriteData(223);
		LCD_WriteData('C');
 402:	5c ce       	rjmp	.-840    	; 0xbc <LCD_WriteData>

00000404 <main>:
volatile uint8_t state=1;
volatile uint16_t max6675Data;

int main(void)
{
	initSequence();
 404:	66 df       	rcall	.-308    	; 0x2d2 <initSequence>
	
	LCD_Clear();
 406:	6d de       	rcall	.-806    	; 0xe2 <LCD_Clear>
	sei();
 408:	78 94       	sei
	LCD_GoTo(12,0);
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	8c e0       	ldi	r24, 0x0C	; 12
 40e:	63 de       	rcall	.-826    	; 0xd6 <LCD_GoTo>
	LCD_WriteData(126);
 410:	8e e7       	ldi	r24, 0x7E	; 126
 412:	54 de       	rcall	.-856    	; 0xbc <LCD_WriteData>
    while(1)
    {
		if (max6675GetTemperature(max6675Read()) < mem.setTemperature)
 414:	b6 df       	rcall	.-148    	; 0x382 <max6675Read>
 416:	20 91 45 01 	lds	r18, 0x0145
}

//Return temperature in Celcius 
uint16_t max6675GetTemperature(uint16_t max6675Data)
{
	return (((max6675Data >> 3) & 0xFFF)/4);
 41a:	35 e0       	ldi	r19, 0x05	; 5
 41c:	96 95       	lsr	r25
 41e:	87 95       	ror	r24
 420:	3a 95       	dec	r19
 422:	e1 f7       	brne	.-8      	; 0x41c <main+0x18>
 424:	93 70       	andi	r25, 0x03	; 3
	sei();
	LCD_GoTo(12,0);
	LCD_WriteData(126);
    while(1)
    {
		if (max6675GetTemperature(max6675Read()) < mem.setTemperature)
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	82 17       	cp	r24, r18
 42a:	93 07       	cpc	r25, r19
 42c:	10 f4       	brcc	.+4      	; 0x432 <main+0x2e>
	}
}

inline void heaterOn(void)
{
	PORTD |= _BV(PD0);
 42e:	58 9a       	sbi	0x0b, 0	; 11
 430:	01 c0       	rjmp	.+2      	; 0x434 <main+0x30>
}

inline void heaterOff(void)
{
	PORTD &= ~_BV(PD0);
 432:	58 98       	cbi	0x0b, 0	; 11
		}
		else
		{
			heaterOff();
		}
		LCD_GoTo(0,0);
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	4e de       	rcall	.-868    	; 0xd6 <LCD_GoTo>
		LCD_WriteTemperature(max6675Read());
 43a:	a3 df       	rcall	.-186    	; 0x382 <max6675Read>
 43c:	bc df       	rcall	.-136    	; 0x3b6 <LCD_WriteTemperature>
		LCD_GoTo(0,1);
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	49 de       	rcall	.-878    	; 0xd6 <LCD_GoTo>
		lcdInt(readADCTemp());
 444:	34 df       	rcall	.-408    	; 0x2ae <readADCTemp>
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	03 df       	rcall	.-506    	; 0x250 <lcdInt>
		LCD_GoTo(13,0);
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	8d e0       	ldi	r24, 0x0D	; 13
 44e:	43 de       	rcall	.-890    	; 0xd6 <LCD_GoTo>
		lcd8t(mem.backlight);
 450:	80 91 41 01 	lds	r24, 0x0141
 454:	e9 de       	rcall	.-558    	; 0x228 <lcd8t>
		LCD_GoTo(13,1);
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	8d e0       	ldi	r24, 0x0D	; 13
 45a:	3d de       	rcall	.-902    	; 0xd6 <LCD_GoTo>
		lcd8t(mem.setTemperature);
 45c:	80 91 45 01 	lds	r24, 0x0145
 460:	e3 de       	rcall	.-570    	; 0x228 <lcd8t>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 462:	2f ef       	ldi	r18, 0xFF	; 255
 464:	81 ee       	ldi	r24, 0xE1	; 225
 466:	94 e0       	ldi	r25, 0x04	; 4
 468:	21 50       	subi	r18, 0x01	; 1
 46a:	80 40       	sbci	r24, 0x00	; 0
 46c:	90 40       	sbci	r25, 0x00	; 0
 46e:	e1 f7       	brne	.-8      	; 0x468 <main+0x64>
 470:	00 c0       	rjmp	.+0      	; 0x472 <main+0x6e>
 472:	00 00       	nop
 474:	cf cf       	rjmp	.-98     	; 0x414 <main+0x10>

00000476 <__vector_1>:
}

// INTERRUPTS

ISR(INT0_vect)
{
 476:	1f 92       	push	r1
 478:	0f 92       	push	r0
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	0f 92       	push	r0
 47e:	11 24       	eor	r1, r1
 480:	2f 93       	push	r18
 482:	3f 93       	push	r19
 484:	4f 93       	push	r20
 486:	5f 93       	push	r21
 488:	6f 93       	push	r22
 48a:	7f 93       	push	r23
 48c:	8f 93       	push	r24
 48e:	9f 93       	push	r25
 490:	af 93       	push	r26
 492:	bf 93       	push	r27
 494:	ef 93       	push	r30
 496:	ff 93       	push	r31
	state = (state+1) % 2;
 498:	80 91 00 01 	lds	r24, 0x0100
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	81 70       	andi	r24, 0x01	; 1
 4a2:	99 27       	eor	r25, r25
 4a4:	80 93 00 01 	sts	0x0100, r24
	if (state)
 4a8:	80 91 00 01 	lds	r24, 0x0100
 4ac:	88 23       	and	r24, r24
 4ae:	71 f0       	breq	.+28     	; 0x4cc <__vector_1+0x56>
	{
		encoderPosition = mem.backlight;
 4b0:	80 91 41 01 	lds	r24, 0x0141
 4b4:	80 93 3a 01 	sts	0x013A, r24
		LCD_GoTo(12,0);
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	8c e0       	ldi	r24, 0x0C	; 12
 4bc:	0c de       	rcall	.-1000   	; 0xd6 <LCD_GoTo>
		LCD_WriteData(126);
 4be:	8e e7       	ldi	r24, 0x7E	; 126
 4c0:	fd dd       	rcall	.-1030   	; 0xbc <LCD_WriteData>
		LCD_GoTo(12,1);
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	8c e0       	ldi	r24, 0x0C	; 12
 4c6:	07 de       	rcall	.-1010   	; 0xd6 <LCD_GoTo>
		LCD_WriteData(32);
 4c8:	80 e2       	ldi	r24, 0x20	; 32
 4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <__vector_1+0x70>
	} 
	else
	{
		encoderPosition = mem.setTemperature;
 4cc:	80 91 45 01 	lds	r24, 0x0145
 4d0:	80 93 3a 01 	sts	0x013A, r24
		LCD_GoTo(12,0);
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	8c e0       	ldi	r24, 0x0C	; 12
 4d8:	fe dd       	rcall	.-1028   	; 0xd6 <LCD_GoTo>
		LCD_WriteData(32);
 4da:	80 e2       	ldi	r24, 0x20	; 32
 4dc:	ef dd       	rcall	.-1058   	; 0xbc <LCD_WriteData>
		LCD_GoTo(12,1);
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	8c e0       	ldi	r24, 0x0C	; 12
 4e2:	f9 dd       	rcall	.-1038   	; 0xd6 <LCD_GoTo>
		LCD_WriteData(126);
 4e4:	8e e7       	ldi	r24, 0x7E	; 126
 4e6:	ea dd       	rcall	.-1068   	; 0xbc <LCD_WriteData>
	}
	eepromSave();
 4e8:	3c de       	rcall	.-904    	; 0x162 <eepromSave>
	speakerBeep(20);
 4ea:	84 e1       	ldi	r24, 0x14	; 20
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	8b de       	rcall	.-746    	; 0x206 <speakerBeep>
}
 4f0:	ff 91       	pop	r31
 4f2:	ef 91       	pop	r30
 4f4:	bf 91       	pop	r27
 4f6:	af 91       	pop	r26
 4f8:	9f 91       	pop	r25
 4fa:	8f 91       	pop	r24
 4fc:	7f 91       	pop	r23
 4fe:	6f 91       	pop	r22
 500:	5f 91       	pop	r21
 502:	4f 91       	pop	r20
 504:	3f 91       	pop	r19
 506:	2f 91       	pop	r18
 508:	0f 90       	pop	r0
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	0f 90       	pop	r0
 50e:	1f 90       	pop	r1
 510:	18 95       	reti

00000512 <__vector_2>:

ISR(INT1_vect)
{
 512:	1f 92       	push	r1
 514:	0f 92       	push	r0
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	0f 92       	push	r0
 51a:	11 24       	eor	r1, r1
 51c:	2f 93       	push	r18
 51e:	3f 93       	push	r19
 520:	4f 93       	push	r20
 522:	5f 93       	push	r21
 524:	6f 93       	push	r22
 526:	7f 93       	push	r23
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
 52c:	af 93       	push	r26
 52e:	bf 93       	push	r27
 530:	ef 93       	push	r30
 532:	ff 93       	push	r31
	if (PIND & _BV(PD4))
 534:	4c 9b       	sbis	0x09, 4	; 9
 536:	08 c0       	rjmp	.+16     	; 0x548 <__vector_2+0x36>
	{
		if (encoderPosition>0)
 538:	80 91 3a 01 	lds	r24, 0x013A
 53c:	88 23       	and	r24, r24
 53e:	69 f0       	breq	.+26     	; 0x55a <__vector_2+0x48>
		encoderPosition--;
 540:	80 91 3a 01 	lds	r24, 0x013A
 544:	81 50       	subi	r24, 0x01	; 1
 546:	07 c0       	rjmp	.+14     	; 0x556 <__vector_2+0x44>
	}
	else
	{
		if (encoderPosition<255)
 548:	80 91 3a 01 	lds	r24, 0x013A
 54c:	8f 3f       	cpi	r24, 0xFF	; 255
 54e:	29 f0       	breq	.+10     	; 0x55a <__vector_2+0x48>
		encoderPosition++;
 550:	80 91 3a 01 	lds	r24, 0x013A
 554:	8f 5f       	subi	r24, 0xFF	; 255
 556:	80 93 3a 01 	sts	0x013A, r24
	}
	//
	if(state)
 55a:	80 91 00 01 	lds	r24, 0x0100
 55e:	88 23       	and	r24, r24
 560:	21 f0       	breq	.+8      	; 0x56a <__vector_2+0x58>
	{
		setBacklight(encoderPosition);
 562:	80 91 3a 01 	lds	r24, 0x013A
 566:	45 de       	rcall	.-886    	; 0x1f2 <setBacklight>
 568:	04 c0       	rjmp	.+8      	; 0x572 <__vector_2+0x60>
	}
	else
	{
		mem.setTemperature=encoderPosition;
 56a:	80 91 3a 01 	lds	r24, 0x013A
 56e:	80 93 45 01 	sts	0x0145, r24
		
		
	}
	
}
 572:	ff 91       	pop	r31
 574:	ef 91       	pop	r30
 576:	bf 91       	pop	r27
 578:	af 91       	pop	r26
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	7f 91       	pop	r23
 580:	6f 91       	pop	r22
 582:	5f 91       	pop	r21
 584:	4f 91       	pop	r20
 586:	3f 91       	pop	r19
 588:	2f 91       	pop	r18
 58a:	0f 90       	pop	r0
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	0f 90       	pop	r0
 590:	1f 90       	pop	r1
 592:	18 95       	reti

00000594 <__udivmodqi4>:
 594:	99 1b       	sub	r25, r25
 596:	79 e0       	ldi	r23, 0x09	; 9
 598:	04 c0       	rjmp	.+8      	; 0x5a2 <__udivmodqi4_ep>

0000059a <__udivmodqi4_loop>:
 59a:	99 1f       	adc	r25, r25
 59c:	96 17       	cp	r25, r22
 59e:	08 f0       	brcs	.+2      	; 0x5a2 <__udivmodqi4_ep>
 5a0:	96 1b       	sub	r25, r22

000005a2 <__udivmodqi4_ep>:
 5a2:	88 1f       	adc	r24, r24
 5a4:	7a 95       	dec	r23
 5a6:	c9 f7       	brne	.-14     	; 0x59a <__udivmodqi4_loop>
 5a8:	80 95       	com	r24
 5aa:	08 95       	ret

000005ac <__udivmodhi4>:
 5ac:	aa 1b       	sub	r26, r26
 5ae:	bb 1b       	sub	r27, r27
 5b0:	51 e1       	ldi	r21, 0x11	; 17
 5b2:	07 c0       	rjmp	.+14     	; 0x5c2 <__udivmodhi4_ep>

000005b4 <__udivmodhi4_loop>:
 5b4:	aa 1f       	adc	r26, r26
 5b6:	bb 1f       	adc	r27, r27
 5b8:	a6 17       	cp	r26, r22
 5ba:	b7 07       	cpc	r27, r23
 5bc:	10 f0       	brcs	.+4      	; 0x5c2 <__udivmodhi4_ep>
 5be:	a6 1b       	sub	r26, r22
 5c0:	b7 0b       	sbc	r27, r23

000005c2 <__udivmodhi4_ep>:
 5c2:	88 1f       	adc	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	5a 95       	dec	r21
 5c8:	a9 f7       	brne	.-22     	; 0x5b4 <__udivmodhi4_loop>
 5ca:	80 95       	com	r24
 5cc:	90 95       	com	r25
 5ce:	bc 01       	movw	r22, r24
 5d0:	cd 01       	movw	r24, r26
 5d2:	08 95       	ret

000005d4 <__itoa_ncheck>:
 5d4:	bb 27       	eor	r27, r27
 5d6:	4a 30       	cpi	r20, 0x0A	; 10
 5d8:	31 f4       	brne	.+12     	; 0x5e6 <__itoa_ncheck+0x12>
 5da:	99 23       	and	r25, r25
 5dc:	22 f4       	brpl	.+8      	; 0x5e6 <__itoa_ncheck+0x12>
 5de:	bd e2       	ldi	r27, 0x2D	; 45
 5e0:	90 95       	com	r25
 5e2:	81 95       	neg	r24
 5e4:	9f 4f       	sbci	r25, 0xFF	; 255
 5e6:	01 c0       	rjmp	.+2      	; 0x5ea <__utoa_common>

000005e8 <__utoa_ncheck>:
 5e8:	bb 27       	eor	r27, r27

000005ea <__utoa_common>:
 5ea:	fb 01       	movw	r30, r22
 5ec:	55 27       	eor	r21, r21
 5ee:	aa 27       	eor	r26, r26
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	aa 1f       	adc	r26, r26
 5f6:	a4 17       	cp	r26, r20
 5f8:	10 f0       	brcs	.+4      	; 0x5fe <__utoa_common+0x14>
 5fa:	a4 1b       	sub	r26, r20
 5fc:	83 95       	inc	r24
 5fe:	50 51       	subi	r21, 0x10	; 16
 600:	b9 f7       	brne	.-18     	; 0x5f0 <__utoa_common+0x6>
 602:	a0 5d       	subi	r26, 0xD0	; 208
 604:	aa 33       	cpi	r26, 0x3A	; 58
 606:	08 f0       	brcs	.+2      	; 0x60a <__utoa_common+0x20>
 608:	a9 5d       	subi	r26, 0xD9	; 217
 60a:	a1 93       	st	Z+, r26
 60c:	00 97       	sbiw	r24, 0x00	; 0
 60e:	79 f7       	brne	.-34     	; 0x5ee <__utoa_common+0x4>
 610:	b1 11       	cpse	r27, r1
 612:	b1 93       	st	Z+, r27
 614:	11 92       	st	Z+, r1
 616:	cb 01       	movw	r24, r22
 618:	00 c0       	rjmp	.+0      	; 0x61a <strrev>

0000061a <strrev>:
 61a:	dc 01       	movw	r26, r24
 61c:	fc 01       	movw	r30, r24
 61e:	67 2f       	mov	r22, r23
 620:	71 91       	ld	r23, Z+
 622:	77 23       	and	r23, r23
 624:	e1 f7       	brne	.-8      	; 0x61e <strrev+0x4>
 626:	32 97       	sbiw	r30, 0x02	; 2
 628:	04 c0       	rjmp	.+8      	; 0x632 <strrev+0x18>
 62a:	7c 91       	ld	r23, X
 62c:	6d 93       	st	X+, r22
 62e:	70 83       	st	Z, r23
 630:	62 91       	ld	r22, -Z
 632:	ae 17       	cp	r26, r30
 634:	bf 07       	cpc	r27, r31
 636:	c8 f3       	brcs	.-14     	; 0x62a <strrev+0x10>
 638:	08 95       	ret

0000063a <eeprom_read_block>:
 63a:	dc 01       	movw	r26, r24
 63c:	cb 01       	movw	r24, r22

0000063e <eeprom_read_blraw>:
 63e:	fc 01       	movw	r30, r24
 640:	f9 99       	sbic	0x1f, 1	; 31
 642:	fe cf       	rjmp	.-4      	; 0x640 <eeprom_read_blraw+0x2>
 644:	06 c0       	rjmp	.+12     	; 0x652 <eeprom_read_blraw+0x14>
 646:	f2 bd       	out	0x22, r31	; 34
 648:	e1 bd       	out	0x21, r30	; 33
 64a:	f8 9a       	sbi	0x1f, 0	; 31
 64c:	31 96       	adiw	r30, 0x01	; 1
 64e:	00 b4       	in	r0, 0x20	; 32
 650:	0d 92       	st	X+, r0
 652:	41 50       	subi	r20, 0x01	; 1
 654:	50 40       	sbci	r21, 0x00	; 0
 656:	b8 f7       	brcc	.-18     	; 0x646 <eeprom_read_blraw+0x8>
 658:	08 95       	ret

0000065a <eeprom_update_block>:
 65a:	dc 01       	movw	r26, r24
 65c:	a4 0f       	add	r26, r20
 65e:	b5 1f       	adc	r27, r21
 660:	41 50       	subi	r20, 0x01	; 1
 662:	50 40       	sbci	r21, 0x00	; 0
 664:	40 f0       	brcs	.+16     	; 0x676 <eeprom_update_block+0x1c>
 666:	cb 01       	movw	r24, r22
 668:	84 0f       	add	r24, r20
 66a:	95 1f       	adc	r25, r21
 66c:	2e 91       	ld	r18, -X
 66e:	05 d0       	rcall	.+10     	; 0x67a <eeprom_update_r18>
 670:	41 50       	subi	r20, 0x01	; 1
 672:	50 40       	sbci	r21, 0x00	; 0
 674:	d8 f7       	brcc	.-10     	; 0x66c <eeprom_update_block+0x12>
 676:	08 95       	ret

00000678 <eeprom_update_byte>:
 678:	26 2f       	mov	r18, r22

0000067a <eeprom_update_r18>:
 67a:	f9 99       	sbic	0x1f, 1	; 31
 67c:	fe cf       	rjmp	.-4      	; 0x67a <eeprom_update_r18>
 67e:	92 bd       	out	0x22, r25	; 34
 680:	81 bd       	out	0x21, r24	; 33
 682:	f8 9a       	sbi	0x1f, 0	; 31
 684:	01 97       	sbiw	r24, 0x01	; 1
 686:	00 b4       	in	r0, 0x20	; 32
 688:	02 16       	cp	r0, r18
 68a:	39 f0       	breq	.+14     	; 0x69a <eeprom_update_r18+0x20>
 68c:	1f ba       	out	0x1f, r1	; 31
 68e:	20 bd       	out	0x20, r18	; 32
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	f8 94       	cli
 694:	fa 9a       	sbi	0x1f, 2	; 31
 696:	f9 9a       	sbi	0x1f, 1	; 31
 698:	0f be       	out	0x3f, r0	; 63
 69a:	08 95       	ret

0000069c <_exit>:
 69c:	f8 94       	cli

0000069e <__stop_program>:
 69e:	ff cf       	rjmp	.-2      	; 0x69e <__stop_program>
